ARM GAS  C:\Users\rabbit\AppData\Local\Temp\cc9nYx0b.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"USBFS_episr.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.USBFS_EP_1_ISR,"ax",%progbits
  20              		.align	1
  21              		.global	USBFS_EP_1_ISR
  22              		.thumb
  23              		.thumb_func
  24              		.type	USBFS_EP_1_ISR, %function
  25              	USBFS_EP_1_ISR:
  26              	.LFB0:
  27              		.file 1 "Generated_Source\\PSoC5\\USBFS_episr.c"
   1:Generated_Source\PSoC5/USBFS_episr.c **** /***************************************************************************//**
   2:Generated_Source\PSoC5/USBFS_episr.c **** * \file USBFS_episr.c
   3:Generated_Source\PSoC5/USBFS_episr.c **** * \version 3.20
   4:Generated_Source\PSoC5/USBFS_episr.c **** *
   5:Generated_Source\PSoC5/USBFS_episr.c **** * \brief
   6:Generated_Source\PSoC5/USBFS_episr.c **** *  This file contains the Data endpoint Interrupt Service Routines.
   7:Generated_Source\PSoC5/USBFS_episr.c **** *
   8:Generated_Source\PSoC5/USBFS_episr.c **** ********************************************************************************
   9:Generated_Source\PSoC5/USBFS_episr.c **** * \copyright
  10:Generated_Source\PSoC5/USBFS_episr.c **** * Copyright 2008-2016, Cypress Semiconductor Corporation.  All rights reserved.
  11:Generated_Source\PSoC5/USBFS_episr.c **** * You may use this file only in accordance with the license, terms, conditions,
  12:Generated_Source\PSoC5/USBFS_episr.c **** * disclaimers, and limitations in the end user license agreement accompanying
  13:Generated_Source\PSoC5/USBFS_episr.c **** * the software package with which this file was provided.
  14:Generated_Source\PSoC5/USBFS_episr.c **** *******************************************************************************/
  15:Generated_Source\PSoC5/USBFS_episr.c **** 
  16:Generated_Source\PSoC5/USBFS_episr.c **** #include "USBFS_pvt.h"
  17:Generated_Source\PSoC5/USBFS_episr.c **** #include "USBFS_cydmac.h"
  18:Generated_Source\PSoC5/USBFS_episr.c **** 
  19:Generated_Source\PSoC5/USBFS_episr.c **** 
  20:Generated_Source\PSoC5/USBFS_episr.c **** 
  21:Generated_Source\PSoC5/USBFS_episr.c **** /***************************************
  22:Generated_Source\PSoC5/USBFS_episr.c **** * Custom Declarations
  23:Generated_Source\PSoC5/USBFS_episr.c **** ***************************************/
  24:Generated_Source\PSoC5/USBFS_episr.c **** /* `#START CUSTOM_DECLARATIONS` Place your declaration here */
  25:Generated_Source\PSoC5/USBFS_episr.c **** 
  26:Generated_Source\PSoC5/USBFS_episr.c **** /* `#END` */
  27:Generated_Source\PSoC5/USBFS_episr.c **** 
  28:Generated_Source\PSoC5/USBFS_episr.c **** 
  29:Generated_Source\PSoC5/USBFS_episr.c **** #if (USBFS_EP1_ISR_ACTIVE)
  30:Generated_Source\PSoC5/USBFS_episr.c ****     /******************************************************************************
ARM GAS  C:\Users\rabbit\AppData\Local\Temp\cc9nYx0b.s 			page 2


  31:Generated_Source\PSoC5/USBFS_episr.c ****     * Function Name: USBFS_EP_1_ISR
  32:Generated_Source\PSoC5/USBFS_episr.c ****     ***************************************************************************//**
  33:Generated_Source\PSoC5/USBFS_episr.c ****     *
  34:Generated_Source\PSoC5/USBFS_episr.c ****     *  Endpoint 1 Interrupt Service Routine
  35:Generated_Source\PSoC5/USBFS_episr.c ****     *
  36:Generated_Source\PSoC5/USBFS_episr.c ****     ******************************************************************************/
  37:Generated_Source\PSoC5/USBFS_episr.c ****     CY_ISR(USBFS_EP_1_ISR)
  38:Generated_Source\PSoC5/USBFS_episr.c ****     {
  28              		.loc 1 38 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  39:Generated_Source\PSoC5/USBFS_episr.c **** 
  40:Generated_Source\PSoC5/USBFS_episr.c ****     #ifdef USBFS_EP_1_ISR_ENTRY_CALLBACK
  41:Generated_Source\PSoC5/USBFS_episr.c ****         USBFS_EP_1_ISR_EntryCallback();
  42:Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (USBFS_EP_1_ISR_ENTRY_CALLBACK) */
  43:Generated_Source\PSoC5/USBFS_episr.c **** 
  44:Generated_Source\PSoC5/USBFS_episr.c ****         /* `#START EP1_USER_CODE` Place your code here */
  45:Generated_Source\PSoC5/USBFS_episr.c **** 
  46:Generated_Source\PSoC5/USBFS_episr.c ****         /* `#END` */
  47:Generated_Source\PSoC5/USBFS_episr.c **** 
  48:Generated_Source\PSoC5/USBFS_episr.c ****     #if (CY_PSOC3 && defined(USBFS_ENABLE_MIDI_STREAMING) && \
  49:Generated_Source\PSoC5/USBFS_episr.c ****         !defined(USBFS_MAIN_SERVICE_MIDI_OUT) && USBFS_ISR_SERVICE_MIDI_OUT)
  50:Generated_Source\PSoC5/USBFS_episr.c ****         {
  51:Generated_Source\PSoC5/USBFS_episr.c ****             uint8 intEn = EA;
  52:Generated_Source\PSoC5/USBFS_episr.c ****             CyGlobalIntEnable;  /* Enable nested interrupts. */
  53:Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (CY_PSOC3 && USBFS_ISR_SERVICE_MIDI_OUT) */
  54:Generated_Source\PSoC5/USBFS_episr.c ****     
  55:Generated_Source\PSoC5/USBFS_episr.c ****         USBFS_ClearSieEpInterruptSource(USBFS_SIE_INT_EP1_INTR);
  33              		.loc 1 55 0
  34 0000 084B     		ldr	r3, .L6
  35 0002 0122     		movs	r2, #1
  36 0004 1A70     		strb	r2, [r3]
  56:Generated_Source\PSoC5/USBFS_episr.c ****             
  57:Generated_Source\PSoC5/USBFS_episr.c ****         /* Notifies user that transfer IN or OUT transfer is completed.
  58:Generated_Source\PSoC5/USBFS_episr.c ****         * IN endpoint: endpoint buffer can be reloaded, Host is read data.
  59:Generated_Source\PSoC5/USBFS_episr.c ****         * OUT endpoint: data is ready to be read from endpoint buffer. 
  60:Generated_Source\PSoC5/USBFS_episr.c ****         */
  61:Generated_Source\PSoC5/USBFS_episr.c ****     #if (CY_PSOC4 && USBFS_EP_MANAGEMENT_DMA_AUTO)
  62:Generated_Source\PSoC5/USBFS_episr.c ****         if (0u != (USBFS_EP[USBFS_EP1].addr & USBFS_DIR_IN))
  63:Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (CY_PSOC4 && USBFS_EP_MANAGEMENT_DMA_AUTO) */
  64:Generated_Source\PSoC5/USBFS_episr.c ****         {
  65:Generated_Source\PSoC5/USBFS_episr.c ****             /* Read CR0 register to clear SIE lock. */
  66:Generated_Source\PSoC5/USBFS_episr.c ****             (void) USBFS_SIE_EP_BASE.sieEp[USBFS_EP1].epCr0;
  37              		.loc 1 66 0
  38 0006 0F3B     		subs	r3, r3, #15
  39 0008 9B7C     		ldrb	r3, [r3, #18]	@ zero_extendqisi2
  67:Generated_Source\PSoC5/USBFS_episr.c ****             
  68:Generated_Source\PSoC5/USBFS_episr.c ****             /* Toggle all endpoint types except ISOC. */
  69:Generated_Source\PSoC5/USBFS_episr.c ****             if (USBFS_GET_EP_TYPE(USBFS_EP1) != USBFS_EP_TYPE_ISOC)
  40              		.loc 1 69 0
  41 000a 074B     		ldr	r3, .L6+4
  42 000c 1A7B     		ldrb	r2, [r3, #12]	@ zero_extendqisi2
  43 000e 02F00302 		and	r2, r2, #3
  44 0012 012A     		cmp	r2, #1
  70:Generated_Source\PSoC5/USBFS_episr.c ****             {
ARM GAS  C:\Users\rabbit\AppData\Local\Temp\cc9nYx0b.s 			page 3


  71:Generated_Source\PSoC5/USBFS_episr.c ****                 USBFS_EP[USBFS_EP1].epToggle ^= USBFS_EPX_CNT_DATA_TOGGLE;
  45              		.loc 1 71 0
  46 0014 1EBF     		ittt	ne
  47 0016 DA7B     		ldrbne	r2, [r3, #15]	@ zero_extendqisi2
  48 0018 82F08002 		eorne	r2, r2, #128
  49 001c DA73     		strbne	r2, [r3, #15]
  72:Generated_Source\PSoC5/USBFS_episr.c ****             }
  73:Generated_Source\PSoC5/USBFS_episr.c **** 
  74:Generated_Source\PSoC5/USBFS_episr.c ****             /* EP_MANAGEMENT_DMA_AUTO (Ticket ID# 214187): For OUT endpoint this event is used to n
  75:Generated_Source\PSoC5/USBFS_episr.c ****             * user that DMA has completed copying data from OUT endpoint which is not completely tr
  76:Generated_Source\PSoC5/USBFS_episr.c ****             * Because last chunk of data is being copied.
  77:Generated_Source\PSoC5/USBFS_episr.c ****             * For CY_PSOC 3/5LP: it is acceptable as DMA is really fast.
  78:Generated_Source\PSoC5/USBFS_episr.c ****             * For CY_PSOC4: this event is set in Arbiter interrupt (source is DMA_TERMIN).
  79:Generated_Source\PSoC5/USBFS_episr.c ****             */
  80:Generated_Source\PSoC5/USBFS_episr.c ****             USBFS_EP[USBFS_EP1].apiEpState = USBFS_EVENT_PENDING;
  50              		.loc 1 80 0
  51 001e 0122     		movs	r2, #1
  52 0020 5A73     		strb	r2, [r3, #13]
  53 0022 7047     		bx	lr
  54              	.L7:
  55              		.align	2
  56              	.L6:
  57 0024 0B600040 		.word	1073766411
  58 0028 00000000 		.word	USBFS_EP
  59              		.cfi_endproc
  60              	.LFE0:
  61              		.size	USBFS_EP_1_ISR, .-USBFS_EP_1_ISR
  62              		.section	.text.USBFS_EP_2_ISR,"ax",%progbits
  63              		.align	1
  64              		.global	USBFS_EP_2_ISR
  65              		.thumb
  66              		.thumb_func
  67              		.type	USBFS_EP_2_ISR, %function
  68              	USBFS_EP_2_ISR:
  69              	.LFB1:
  81:Generated_Source\PSoC5/USBFS_episr.c ****         }
  82:Generated_Source\PSoC5/USBFS_episr.c **** 
  83:Generated_Source\PSoC5/USBFS_episr.c ****     #if (!(CY_PSOC4 && USBFS_EP_MANAGEMENT_DMA_AUTO))
  84:Generated_Source\PSoC5/USBFS_episr.c ****         #if (defined(USBFS_ENABLE_MIDI_STREAMING) && \
  85:Generated_Source\PSoC5/USBFS_episr.c ****             !defined(USBFS_MAIN_SERVICE_MIDI_OUT) && USBFS_ISR_SERVICE_MIDI_OUT)
  86:Generated_Source\PSoC5/USBFS_episr.c ****             if (USBFS_midi_out_ep == USBFS_EP1)
  87:Generated_Source\PSoC5/USBFS_episr.c ****             {
  88:Generated_Source\PSoC5/USBFS_episr.c ****                 USBFS_MIDI_OUT_Service();
  89:Generated_Source\PSoC5/USBFS_episr.c ****             }
  90:Generated_Source\PSoC5/USBFS_episr.c ****         #endif /* (USBFS_ISR_SERVICE_MIDI_OUT) */
  91:Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (!(CY_PSOC4 && USBFS_EP_MANAGEMENT_DMA_AUTO)) */
  92:Generated_Source\PSoC5/USBFS_episr.c ****     
  93:Generated_Source\PSoC5/USBFS_episr.c ****         /* `#START EP1_END_USER_CODE` Place your code here */
  94:Generated_Source\PSoC5/USBFS_episr.c **** 
  95:Generated_Source\PSoC5/USBFS_episr.c ****         /* `#END` */
  96:Generated_Source\PSoC5/USBFS_episr.c **** 
  97:Generated_Source\PSoC5/USBFS_episr.c ****     #ifdef USBFS_EP_1_ISR_EXIT_CALLBACK
  98:Generated_Source\PSoC5/USBFS_episr.c ****         USBFS_EP_1_ISR_ExitCallback();
  99:Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (USBFS_EP_1_ISR_EXIT_CALLBACK) */
 100:Generated_Source\PSoC5/USBFS_episr.c **** 
 101:Generated_Source\PSoC5/USBFS_episr.c ****     #if (CY_PSOC3 && defined(USBFS_ENABLE_MIDI_STREAMING) && \
 102:Generated_Source\PSoC5/USBFS_episr.c ****         !defined(USBFS_MAIN_SERVICE_MIDI_OUT) && USBFS_ISR_SERVICE_MIDI_OUT)
ARM GAS  C:\Users\rabbit\AppData\Local\Temp\cc9nYx0b.s 			page 4


 103:Generated_Source\PSoC5/USBFS_episr.c ****         
 104:Generated_Source\PSoC5/USBFS_episr.c ****             EA = intEn; /* Restore nested interrupt configuration. */
 105:Generated_Source\PSoC5/USBFS_episr.c ****         }
 106:Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (CY_PSOC3 && USBFS_ISR_SERVICE_MIDI_OUT) */
 107:Generated_Source\PSoC5/USBFS_episr.c ****     }
 108:Generated_Source\PSoC5/USBFS_episr.c **** 
 109:Generated_Source\PSoC5/USBFS_episr.c **** #endif /* (USBFS_EP1_ISR_ACTIVE) */
 110:Generated_Source\PSoC5/USBFS_episr.c **** 
 111:Generated_Source\PSoC5/USBFS_episr.c **** 
 112:Generated_Source\PSoC5/USBFS_episr.c **** #if (USBFS_EP2_ISR_ACTIVE)
 113:Generated_Source\PSoC5/USBFS_episr.c ****     /*******************************************************************************
 114:Generated_Source\PSoC5/USBFS_episr.c ****     * Function Name: USBFS_EP_2_ISR
 115:Generated_Source\PSoC5/USBFS_episr.c ****     ****************************************************************************//**
 116:Generated_Source\PSoC5/USBFS_episr.c ****     *
 117:Generated_Source\PSoC5/USBFS_episr.c ****     *  Endpoint 2 Interrupt Service Routine.
 118:Generated_Source\PSoC5/USBFS_episr.c ****     *
 119:Generated_Source\PSoC5/USBFS_episr.c ****     *******************************************************************************/
 120:Generated_Source\PSoC5/USBFS_episr.c ****     CY_ISR(USBFS_EP_2_ISR)
 121:Generated_Source\PSoC5/USBFS_episr.c ****     {
  70              		.loc 1 121 0
  71              		.cfi_startproc
  72              		@ args = 0, pretend = 0, frame = 0
  73              		@ frame_needed = 0, uses_anonymous_args = 0
  74              		@ link register save eliminated.
 122:Generated_Source\PSoC5/USBFS_episr.c ****     #ifdef USBFS_EP_2_ISR_ENTRY_CALLBACK
 123:Generated_Source\PSoC5/USBFS_episr.c ****         USBFS_EP_2_ISR_EntryCallback();
 124:Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (USBFS_EP_2_ISR_ENTRY_CALLBACK) */
 125:Generated_Source\PSoC5/USBFS_episr.c **** 
 126:Generated_Source\PSoC5/USBFS_episr.c ****         /* `#START EP2_USER_CODE` Place your code here */
 127:Generated_Source\PSoC5/USBFS_episr.c **** 
 128:Generated_Source\PSoC5/USBFS_episr.c ****         /* `#END` */
 129:Generated_Source\PSoC5/USBFS_episr.c **** 
 130:Generated_Source\PSoC5/USBFS_episr.c ****     #if (CY_PSOC3 && defined(USBFS_ENABLE_MIDI_STREAMING) && \
 131:Generated_Source\PSoC5/USBFS_episr.c ****         !defined(USBFS_MAIN_SERVICE_MIDI_OUT) && USBFS_ISR_SERVICE_MIDI_OUT)
 132:Generated_Source\PSoC5/USBFS_episr.c ****         {
 133:Generated_Source\PSoC5/USBFS_episr.c ****             uint8 intEn = EA;
 134:Generated_Source\PSoC5/USBFS_episr.c ****             CyGlobalIntEnable;  /* Enable nested interrupts. */
 135:Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (CY_PSOC3 && USBFS_ISR_SERVICE_MIDI_OUT) */
 136:Generated_Source\PSoC5/USBFS_episr.c **** 
 137:Generated_Source\PSoC5/USBFS_episr.c ****         USBFS_ClearSieEpInterruptSource(USBFS_SIE_INT_EP2_INTR);
  75              		.loc 1 137 0
  76 0000 094B     		ldr	r3, .L13
  77 0002 0222     		movs	r2, #2
  78 0004 1A70     		strb	r2, [r3]
 138:Generated_Source\PSoC5/USBFS_episr.c **** 
 139:Generated_Source\PSoC5/USBFS_episr.c ****         /* Notifies user that transfer IN or OUT transfer is completed.
 140:Generated_Source\PSoC5/USBFS_episr.c ****         * IN endpoint: endpoint buffer can be reloaded, Host is read data.
 141:Generated_Source\PSoC5/USBFS_episr.c ****         * OUT endpoint: data is ready to be read from endpoint buffer. 
 142:Generated_Source\PSoC5/USBFS_episr.c ****         */
 143:Generated_Source\PSoC5/USBFS_episr.c ****     #if (CY_PSOC4 && USBFS_EP_MANAGEMENT_DMA_AUTO)
 144:Generated_Source\PSoC5/USBFS_episr.c ****         if (0u != (USBFS_EP[USBFS_EP2].addr & USBFS_DIR_IN))
 145:Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (CY_PSOC4 && USBFS_EP_MANAGEMENT_DMA_AUTO) */
 146:Generated_Source\PSoC5/USBFS_episr.c ****         {            
 147:Generated_Source\PSoC5/USBFS_episr.c ****             /* Read CR0 register to clear SIE lock. */
 148:Generated_Source\PSoC5/USBFS_episr.c ****             (void) USBFS_SIE_EP_BASE.sieEp[USBFS_EP2].epCr0;
  79              		.loc 1 148 0
  80 0006 0F3B     		subs	r3, r3, #15
ARM GAS  C:\Users\rabbit\AppData\Local\Temp\cc9nYx0b.s 			page 5


  81 0008 93F82230 		ldrb	r3, [r3, #34]	@ zero_extendqisi2
 149:Generated_Source\PSoC5/USBFS_episr.c ****             
 150:Generated_Source\PSoC5/USBFS_episr.c ****             /* Toggle all endpoint types except ISOC. */
 151:Generated_Source\PSoC5/USBFS_episr.c ****             if (USBFS_GET_EP_TYPE(USBFS_EP2) != USBFS_EP_TYPE_ISOC)
  82              		.loc 1 151 0
  83 000c 074B     		ldr	r3, .L13+4
  84 000e 1A7E     		ldrb	r2, [r3, #24]	@ zero_extendqisi2
  85 0010 02F00302 		and	r2, r2, #3
  86 0014 012A     		cmp	r2, #1
 152:Generated_Source\PSoC5/USBFS_episr.c ****             {
 153:Generated_Source\PSoC5/USBFS_episr.c ****                 USBFS_EP[USBFS_EP2].epToggle ^= USBFS_EPX_CNT_DATA_TOGGLE;
  87              		.loc 1 153 0
  88 0016 1EBF     		ittt	ne
  89 0018 DA7E     		ldrbne	r2, [r3, #27]	@ zero_extendqisi2
  90 001a 82F08002 		eorne	r2, r2, #128
  91 001e DA76     		strbne	r2, [r3, #27]
 154:Generated_Source\PSoC5/USBFS_episr.c ****             }
 155:Generated_Source\PSoC5/USBFS_episr.c **** 
 156:Generated_Source\PSoC5/USBFS_episr.c ****             /* EP_MANAGEMENT_DMA_AUTO (Ticket ID# 214187): For OUT endpoint this event is used to n
 157:Generated_Source\PSoC5/USBFS_episr.c ****             * user that DMA has completed copying data from OUT endpoint which is not completely tr
 158:Generated_Source\PSoC5/USBFS_episr.c ****             * Because last chunk of data is being copied.
 159:Generated_Source\PSoC5/USBFS_episr.c ****             * For CY_PSOC 3/5LP: it is acceptable as DMA is really fast.
 160:Generated_Source\PSoC5/USBFS_episr.c ****             * For CY_PSOC4: this event is set in Arbiter interrupt (source is DMA_TERMIN).
 161:Generated_Source\PSoC5/USBFS_episr.c ****             */
 162:Generated_Source\PSoC5/USBFS_episr.c ****             USBFS_EP[USBFS_EP2].apiEpState = USBFS_EVENT_PENDING;
  92              		.loc 1 162 0
  93 0020 0122     		movs	r2, #1
  94 0022 5A76     		strb	r2, [r3, #25]
  95 0024 7047     		bx	lr
  96              	.L14:
  97 0026 00BF     		.align	2
  98              	.L13:
  99 0028 0B600040 		.word	1073766411
 100 002c 00000000 		.word	USBFS_EP
 101              		.cfi_endproc
 102              	.LFE1:
 103              		.size	USBFS_EP_2_ISR, .-USBFS_EP_2_ISR
 104              		.section	.text.USBFS_SOF_ISR,"ax",%progbits
 105              		.align	1
 106              		.global	USBFS_SOF_ISR
 107              		.thumb
 108              		.thumb_func
 109              		.type	USBFS_SOF_ISR, %function
 110              	USBFS_SOF_ISR:
 111              	.LFB2:
 163:Generated_Source\PSoC5/USBFS_episr.c ****         }
 164:Generated_Source\PSoC5/USBFS_episr.c **** 
 165:Generated_Source\PSoC5/USBFS_episr.c ****     #if (!(CY_PSOC4 && USBFS_EP_MANAGEMENT_DMA_AUTO))
 166:Generated_Source\PSoC5/USBFS_episr.c ****         #if (defined(USBFS_ENABLE_MIDI_STREAMING) && \
 167:Generated_Source\PSoC5/USBFS_episr.c ****             !defined(USBFS_MAIN_SERVICE_MIDI_OUT) && USBFS_ISR_SERVICE_MIDI_OUT)
 168:Generated_Source\PSoC5/USBFS_episr.c ****             if (USBFS_midi_out_ep == USBFS_EP2)
 169:Generated_Source\PSoC5/USBFS_episr.c ****             {
 170:Generated_Source\PSoC5/USBFS_episr.c ****                 USBFS_MIDI_OUT_Service();
 171:Generated_Source\PSoC5/USBFS_episr.c ****             }
 172:Generated_Source\PSoC5/USBFS_episr.c ****         #endif /* (USBFS_ISR_SERVICE_MIDI_OUT) */
 173:Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (!(CY_PSOC4 && USBFS_EP_MANAGEMENT_DMA_AUTO)) */        
 174:Generated_Source\PSoC5/USBFS_episr.c ****     
ARM GAS  C:\Users\rabbit\AppData\Local\Temp\cc9nYx0b.s 			page 6


 175:Generated_Source\PSoC5/USBFS_episr.c ****         /* `#START EP2_END_USER_CODE` Place your code here */
 176:Generated_Source\PSoC5/USBFS_episr.c **** 
 177:Generated_Source\PSoC5/USBFS_episr.c ****         /* `#END` */
 178:Generated_Source\PSoC5/USBFS_episr.c **** 
 179:Generated_Source\PSoC5/USBFS_episr.c ****     #ifdef USBFS_EP_2_ISR_EXIT_CALLBACK
 180:Generated_Source\PSoC5/USBFS_episr.c ****         USBFS_EP_2_ISR_ExitCallback();
 181:Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (USBFS_EP_2_ISR_EXIT_CALLBACK) */
 182:Generated_Source\PSoC5/USBFS_episr.c **** 
 183:Generated_Source\PSoC5/USBFS_episr.c ****     #if (CY_PSOC3 && defined(USBFS_ENABLE_MIDI_STREAMING) && \
 184:Generated_Source\PSoC5/USBFS_episr.c ****         !defined(USBFS_MAIN_SERVICE_MIDI_OUT) && USBFS_ISR_SERVICE_MIDI_OUT)
 185:Generated_Source\PSoC5/USBFS_episr.c ****         
 186:Generated_Source\PSoC5/USBFS_episr.c ****             EA = intEn; /* Restore nested interrupt configuration. */
 187:Generated_Source\PSoC5/USBFS_episr.c ****         }
 188:Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (CY_PSOC3 && USBFS_ISR_SERVICE_MIDI_OUT) */
 189:Generated_Source\PSoC5/USBFS_episr.c ****     }
 190:Generated_Source\PSoC5/USBFS_episr.c **** #endif /* (USBFS_EP2_ISR_ACTIVE) */
 191:Generated_Source\PSoC5/USBFS_episr.c **** 
 192:Generated_Source\PSoC5/USBFS_episr.c **** 
 193:Generated_Source\PSoC5/USBFS_episr.c **** #if (USBFS_EP3_ISR_ACTIVE)
 194:Generated_Source\PSoC5/USBFS_episr.c ****     /*******************************************************************************
 195:Generated_Source\PSoC5/USBFS_episr.c ****     * Function Name: USBFS_EP_3_ISR
 196:Generated_Source\PSoC5/USBFS_episr.c ****     ****************************************************************************//**
 197:Generated_Source\PSoC5/USBFS_episr.c ****     *
 198:Generated_Source\PSoC5/USBFS_episr.c ****     *  Endpoint 3 Interrupt Service Routine.
 199:Generated_Source\PSoC5/USBFS_episr.c ****     *
 200:Generated_Source\PSoC5/USBFS_episr.c ****     *******************************************************************************/
 201:Generated_Source\PSoC5/USBFS_episr.c ****     CY_ISR(USBFS_EP_3_ISR)
 202:Generated_Source\PSoC5/USBFS_episr.c ****     {
 203:Generated_Source\PSoC5/USBFS_episr.c ****     #ifdef USBFS_EP_3_ISR_ENTRY_CALLBACK
 204:Generated_Source\PSoC5/USBFS_episr.c ****         USBFS_EP_3_ISR_EntryCallback();
 205:Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (USBFS_EP_3_ISR_ENTRY_CALLBACK) */
 206:Generated_Source\PSoC5/USBFS_episr.c **** 
 207:Generated_Source\PSoC5/USBFS_episr.c ****         /* `#START EP3_USER_CODE` Place your code here */
 208:Generated_Source\PSoC5/USBFS_episr.c **** 
 209:Generated_Source\PSoC5/USBFS_episr.c ****         /* `#END` */
 210:Generated_Source\PSoC5/USBFS_episr.c **** 
 211:Generated_Source\PSoC5/USBFS_episr.c ****     #if (CY_PSOC3 && defined(USBFS_ENABLE_MIDI_STREAMING) && \
 212:Generated_Source\PSoC5/USBFS_episr.c ****         !defined(USBFS_MAIN_SERVICE_MIDI_OUT) && USBFS_ISR_SERVICE_MIDI_OUT)
 213:Generated_Source\PSoC5/USBFS_episr.c ****         {
 214:Generated_Source\PSoC5/USBFS_episr.c ****             uint8 intEn = EA;
 215:Generated_Source\PSoC5/USBFS_episr.c ****             CyGlobalIntEnable;  /* Enable nested interrupts. */
 216:Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (CY_PSOC3 && USBFS_ISR_SERVICE_MIDI_OUT) */
 217:Generated_Source\PSoC5/USBFS_episr.c **** 
 218:Generated_Source\PSoC5/USBFS_episr.c ****         USBFS_ClearSieEpInterruptSource(USBFS_SIE_INT_EP3_INTR);    
 219:Generated_Source\PSoC5/USBFS_episr.c **** 
 220:Generated_Source\PSoC5/USBFS_episr.c ****         /* Notifies user that transfer IN or OUT transfer is completed.
 221:Generated_Source\PSoC5/USBFS_episr.c ****         * IN endpoint: endpoint buffer can be reloaded, Host is read data.
 222:Generated_Source\PSoC5/USBFS_episr.c ****         * OUT endpoint: data is ready to be read from endpoint buffer. 
 223:Generated_Source\PSoC5/USBFS_episr.c ****         */
 224:Generated_Source\PSoC5/USBFS_episr.c ****     #if (CY_PSOC4 && USBFS_EP_MANAGEMENT_DMA_AUTO)
 225:Generated_Source\PSoC5/USBFS_episr.c ****         if (0u != (USBFS_EP[USBFS_EP3].addr & USBFS_DIR_IN))
 226:Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (USBFS_EP_MANAGEMENT_DMA_AUTO) */
 227:Generated_Source\PSoC5/USBFS_episr.c ****         {            
 228:Generated_Source\PSoC5/USBFS_episr.c ****             /* Read CR0 register to clear SIE lock. */
 229:Generated_Source\PSoC5/USBFS_episr.c ****             (void) USBFS_SIE_EP_BASE.sieEp[USBFS_EP3].epCr0;
 230:Generated_Source\PSoC5/USBFS_episr.c **** 
 231:Generated_Source\PSoC5/USBFS_episr.c ****             /* Toggle all endpoint types except ISOC. */
ARM GAS  C:\Users\rabbit\AppData\Local\Temp\cc9nYx0b.s 			page 7


 232:Generated_Source\PSoC5/USBFS_episr.c ****             if (USBFS_GET_EP_TYPE(USBFS_EP3) != USBFS_EP_TYPE_ISOC)
 233:Generated_Source\PSoC5/USBFS_episr.c ****             {
 234:Generated_Source\PSoC5/USBFS_episr.c ****                 USBFS_EP[USBFS_EP3].epToggle ^= USBFS_EPX_CNT_DATA_TOGGLE;
 235:Generated_Source\PSoC5/USBFS_episr.c ****             }
 236:Generated_Source\PSoC5/USBFS_episr.c **** 
 237:Generated_Source\PSoC5/USBFS_episr.c ****             /* EP_MANAGEMENT_DMA_AUTO (Ticket ID# 214187): For OUT endpoint this event is used to n
 238:Generated_Source\PSoC5/USBFS_episr.c ****             * user that DMA has completed copying data from OUT endpoint which is not completely tr
 239:Generated_Source\PSoC5/USBFS_episr.c ****             * Because last chunk of data is being copied.
 240:Generated_Source\PSoC5/USBFS_episr.c ****             * For CY_PSOC 3/5LP: it is acceptable as DMA is really fast.
 241:Generated_Source\PSoC5/USBFS_episr.c ****             * For CY_PSOC4: this event is set in Arbiter interrupt (source is DMA_TERMIN).
 242:Generated_Source\PSoC5/USBFS_episr.c ****             */
 243:Generated_Source\PSoC5/USBFS_episr.c ****             USBFS_EP[USBFS_EP3].apiEpState = USBFS_EVENT_PENDING;
 244:Generated_Source\PSoC5/USBFS_episr.c ****         }
 245:Generated_Source\PSoC5/USBFS_episr.c **** 
 246:Generated_Source\PSoC5/USBFS_episr.c ****     #if (!(CY_PSOC4 && USBFS_EP_MANAGEMENT_DMA_AUTO))
 247:Generated_Source\PSoC5/USBFS_episr.c ****         #if (defined(USBFS_ENABLE_MIDI_STREAMING) && \
 248:Generated_Source\PSoC5/USBFS_episr.c ****             !defined(USBFS_MAIN_SERVICE_MIDI_OUT) && USBFS_ISR_SERVICE_MIDI_OUT)
 249:Generated_Source\PSoC5/USBFS_episr.c ****             if (USBFS_midi_out_ep == USBFS_EP3)
 250:Generated_Source\PSoC5/USBFS_episr.c ****             {
 251:Generated_Source\PSoC5/USBFS_episr.c ****                 USBFS_MIDI_OUT_Service();
 252:Generated_Source\PSoC5/USBFS_episr.c ****             }
 253:Generated_Source\PSoC5/USBFS_episr.c ****         #endif /* (USBFS_ISR_SERVICE_MIDI_OUT) */
 254:Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (!(CY_PSOC4 && USBFS_EP_MANAGEMENT_DMA_AUTO)) */        
 255:Generated_Source\PSoC5/USBFS_episr.c **** 
 256:Generated_Source\PSoC5/USBFS_episr.c ****         /* `#START EP3_END_USER_CODE` Place your code here */
 257:Generated_Source\PSoC5/USBFS_episr.c **** 
 258:Generated_Source\PSoC5/USBFS_episr.c ****         /* `#END` */
 259:Generated_Source\PSoC5/USBFS_episr.c **** 
 260:Generated_Source\PSoC5/USBFS_episr.c ****     #ifdef USBFS_EP_3_ISR_EXIT_CALLBACK
 261:Generated_Source\PSoC5/USBFS_episr.c ****         USBFS_EP_3_ISR_ExitCallback();
 262:Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (USBFS_EP_3_ISR_EXIT_CALLBACK) */
 263:Generated_Source\PSoC5/USBFS_episr.c **** 
 264:Generated_Source\PSoC5/USBFS_episr.c ****     #if (CY_PSOC3 && defined(USBFS_ENABLE_MIDI_STREAMING) && \
 265:Generated_Source\PSoC5/USBFS_episr.c ****         !defined(USBFS_MAIN_SERVICE_MIDI_OUT) && USBFS_ISR_SERVICE_MIDI_OUT)
 266:Generated_Source\PSoC5/USBFS_episr.c ****         
 267:Generated_Source\PSoC5/USBFS_episr.c ****             EA = intEn; /* Restore nested interrupt configuration. */
 268:Generated_Source\PSoC5/USBFS_episr.c ****         }
 269:Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (CY_PSOC3 && USBFS_ISR_SERVICE_MIDI_OUT) */
 270:Generated_Source\PSoC5/USBFS_episr.c ****     }
 271:Generated_Source\PSoC5/USBFS_episr.c **** #endif /* (USBFS_EP3_ISR_ACTIVE) */
 272:Generated_Source\PSoC5/USBFS_episr.c **** 
 273:Generated_Source\PSoC5/USBFS_episr.c **** 
 274:Generated_Source\PSoC5/USBFS_episr.c **** #if (USBFS_EP4_ISR_ACTIVE)
 275:Generated_Source\PSoC5/USBFS_episr.c ****     /*******************************************************************************
 276:Generated_Source\PSoC5/USBFS_episr.c ****     * Function Name: USBFS_EP_4_ISR
 277:Generated_Source\PSoC5/USBFS_episr.c ****     ****************************************************************************//**
 278:Generated_Source\PSoC5/USBFS_episr.c ****     *
 279:Generated_Source\PSoC5/USBFS_episr.c ****     *  Endpoint 4 Interrupt Service Routine.
 280:Generated_Source\PSoC5/USBFS_episr.c ****     *
 281:Generated_Source\PSoC5/USBFS_episr.c ****     *******************************************************************************/
 282:Generated_Source\PSoC5/USBFS_episr.c ****     CY_ISR(USBFS_EP_4_ISR)
 283:Generated_Source\PSoC5/USBFS_episr.c ****     {
 284:Generated_Source\PSoC5/USBFS_episr.c ****     #ifdef USBFS_EP_4_ISR_ENTRY_CALLBACK
 285:Generated_Source\PSoC5/USBFS_episr.c ****         USBFS_EP_4_ISR_EntryCallback();
 286:Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (USBFS_EP_4_ISR_ENTRY_CALLBACK) */
 287:Generated_Source\PSoC5/USBFS_episr.c **** 
 288:Generated_Source\PSoC5/USBFS_episr.c ****         /* `#START EP4_USER_CODE` Place your code here */
ARM GAS  C:\Users\rabbit\AppData\Local\Temp\cc9nYx0b.s 			page 8


 289:Generated_Source\PSoC5/USBFS_episr.c **** 
 290:Generated_Source\PSoC5/USBFS_episr.c ****         /* `#END` */
 291:Generated_Source\PSoC5/USBFS_episr.c **** 
 292:Generated_Source\PSoC5/USBFS_episr.c ****     #if (CY_PSOC3 && defined(USBFS_ENABLE_MIDI_STREAMING) && \
 293:Generated_Source\PSoC5/USBFS_episr.c ****         !defined(USBFS_MAIN_SERVICE_MIDI_OUT) && USBFS_ISR_SERVICE_MIDI_OUT)
 294:Generated_Source\PSoC5/USBFS_episr.c ****         {
 295:Generated_Source\PSoC5/USBFS_episr.c ****             uint8 intEn = EA;
 296:Generated_Source\PSoC5/USBFS_episr.c ****             CyGlobalIntEnable;  /* Enable nested interrupts. */
 297:Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (CY_PSOC3 && USBFS_ISR_SERVICE_MIDI_OUT) */
 298:Generated_Source\PSoC5/USBFS_episr.c **** 
 299:Generated_Source\PSoC5/USBFS_episr.c ****         USBFS_ClearSieEpInterruptSource(USBFS_SIE_INT_EP4_INTR);
 300:Generated_Source\PSoC5/USBFS_episr.c ****         
 301:Generated_Source\PSoC5/USBFS_episr.c ****         /* Notifies user that transfer IN or OUT transfer is completed.
 302:Generated_Source\PSoC5/USBFS_episr.c ****         * IN endpoint: endpoint buffer can be reloaded, Host is read data.
 303:Generated_Source\PSoC5/USBFS_episr.c ****         * OUT endpoint: data is ready to read from endpoint buffer. 
 304:Generated_Source\PSoC5/USBFS_episr.c ****         */
 305:Generated_Source\PSoC5/USBFS_episr.c ****     #if (CY_PSOC4 && USBFS_EP_MANAGEMENT_DMA_AUTO)
 306:Generated_Source\PSoC5/USBFS_episr.c ****         if (0u != (USBFS_EP[USBFS_EP4].addr & USBFS_DIR_IN))
 307:Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (USBFS_EP_MANAGEMENT_DMA_AUTO) */
 308:Generated_Source\PSoC5/USBFS_episr.c ****         {
 309:Generated_Source\PSoC5/USBFS_episr.c ****             /* Read CR0 register to clear SIE lock. */
 310:Generated_Source\PSoC5/USBFS_episr.c ****             (void) USBFS_SIE_EP_BASE.sieEp[USBFS_EP4].epCr0;
 311:Generated_Source\PSoC5/USBFS_episr.c **** 
 312:Generated_Source\PSoC5/USBFS_episr.c ****             /* Toggle all endpoint types except ISOC. */
 313:Generated_Source\PSoC5/USBFS_episr.c ****             if (USBFS_GET_EP_TYPE(USBFS_EP4) != USBFS_EP_TYPE_ISOC)
 314:Generated_Source\PSoC5/USBFS_episr.c ****             {
 315:Generated_Source\PSoC5/USBFS_episr.c ****                 USBFS_EP[USBFS_EP4].epToggle ^= USBFS_EPX_CNT_DATA_TOGGLE;
 316:Generated_Source\PSoC5/USBFS_episr.c ****             }
 317:Generated_Source\PSoC5/USBFS_episr.c **** 
 318:Generated_Source\PSoC5/USBFS_episr.c ****             /* EP_MANAGEMENT_DMA_AUTO (Ticket ID# 214187): For OUT endpoint this event is used to n
 319:Generated_Source\PSoC5/USBFS_episr.c ****             * user that DMA has completed copying data from OUT endpoint which is not completely tr
 320:Generated_Source\PSoC5/USBFS_episr.c ****             * Because last chunk of data is being copied.
 321:Generated_Source\PSoC5/USBFS_episr.c ****             * For CY_PSOC 3/5LP: it is acceptable as DMA is really fast.
 322:Generated_Source\PSoC5/USBFS_episr.c ****             * For CY_PSOC4: this event is set in Arbiter interrupt (source is DMA_TERMIN).
 323:Generated_Source\PSoC5/USBFS_episr.c ****             */
 324:Generated_Source\PSoC5/USBFS_episr.c ****             USBFS_EP[USBFS_EP4].apiEpState = USBFS_EVENT_PENDING;
 325:Generated_Source\PSoC5/USBFS_episr.c ****         }
 326:Generated_Source\PSoC5/USBFS_episr.c **** 
 327:Generated_Source\PSoC5/USBFS_episr.c ****     #if (!(CY_PSOC4 && USBFS_EP_MANAGEMENT_DMA_AUTO))
 328:Generated_Source\PSoC5/USBFS_episr.c ****         #if (defined(USBFS_ENABLE_MIDI_STREAMING) && \
 329:Generated_Source\PSoC5/USBFS_episr.c ****             !defined(USBFS_MAIN_SERVICE_MIDI_OUT) && USBFS_ISR_SERVICE_MIDI_OUT)
 330:Generated_Source\PSoC5/USBFS_episr.c ****             if(USBFS_midi_out_ep == USBFS_EP4)
 331:Generated_Source\PSoC5/USBFS_episr.c ****             {
 332:Generated_Source\PSoC5/USBFS_episr.c ****                 USBFS_MIDI_OUT_Service();
 333:Generated_Source\PSoC5/USBFS_episr.c ****             }
 334:Generated_Source\PSoC5/USBFS_episr.c ****         #endif /* (USBFS_ISR_SERVICE_MIDI_OUT) */
 335:Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (!(CY_PSOC4 && USBFS_EP_MANAGEMENT_DMA_AUTO)) */        
 336:Generated_Source\PSoC5/USBFS_episr.c **** 
 337:Generated_Source\PSoC5/USBFS_episr.c ****         /* `#START EP4_END_USER_CODE` Place your code here */
 338:Generated_Source\PSoC5/USBFS_episr.c **** 
 339:Generated_Source\PSoC5/USBFS_episr.c ****         /* `#END` */
 340:Generated_Source\PSoC5/USBFS_episr.c **** 
 341:Generated_Source\PSoC5/USBFS_episr.c ****     #ifdef USBFS_EP_4_ISR_EXIT_CALLBACK
 342:Generated_Source\PSoC5/USBFS_episr.c ****         USBFS_EP_4_ISR_ExitCallback();
 343:Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (USBFS_EP_4_ISR_EXIT_CALLBACK) */
 344:Generated_Source\PSoC5/USBFS_episr.c **** 
 345:Generated_Source\PSoC5/USBFS_episr.c ****     #if (CY_PSOC3 && defined(USBFS_ENABLE_MIDI_STREAMING) && \
ARM GAS  C:\Users\rabbit\AppData\Local\Temp\cc9nYx0b.s 			page 9


 346:Generated_Source\PSoC5/USBFS_episr.c ****         !defined(USBFS_MAIN_SERVICE_MIDI_OUT) && USBFS_ISR_SERVICE_MIDI_OUT)
 347:Generated_Source\PSoC5/USBFS_episr.c ****         
 348:Generated_Source\PSoC5/USBFS_episr.c ****             EA = intEn; /* Restore nested interrupt configuration. */
 349:Generated_Source\PSoC5/USBFS_episr.c ****         }
 350:Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (CY_PSOC3 && USBFS_ISR_SERVICE_MIDI_OUT) */
 351:Generated_Source\PSoC5/USBFS_episr.c ****     }
 352:Generated_Source\PSoC5/USBFS_episr.c **** #endif /* (USBFS_EP4_ISR_ACTIVE) */
 353:Generated_Source\PSoC5/USBFS_episr.c **** 
 354:Generated_Source\PSoC5/USBFS_episr.c **** 
 355:Generated_Source\PSoC5/USBFS_episr.c **** #if (USBFS_EP5_ISR_ACTIVE)
 356:Generated_Source\PSoC5/USBFS_episr.c ****     /*******************************************************************************
 357:Generated_Source\PSoC5/USBFS_episr.c ****     * Function Name: USBFS_EP_5_ISR
 358:Generated_Source\PSoC5/USBFS_episr.c ****     ****************************************************************************//**
 359:Generated_Source\PSoC5/USBFS_episr.c ****     *
 360:Generated_Source\PSoC5/USBFS_episr.c ****     *  Endpoint 5 Interrupt Service Routine
 361:Generated_Source\PSoC5/USBFS_episr.c ****     *
 362:Generated_Source\PSoC5/USBFS_episr.c ****     *
 363:Generated_Source\PSoC5/USBFS_episr.c ****     *******************************************************************************/
 364:Generated_Source\PSoC5/USBFS_episr.c ****     CY_ISR(USBFS_EP_5_ISR)
 365:Generated_Source\PSoC5/USBFS_episr.c ****     {
 366:Generated_Source\PSoC5/USBFS_episr.c ****     #ifdef USBFS_EP_5_ISR_ENTRY_CALLBACK
 367:Generated_Source\PSoC5/USBFS_episr.c ****         USBFS_EP_5_ISR_EntryCallback();
 368:Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (USBFS_EP_5_ISR_ENTRY_CALLBACK) */
 369:Generated_Source\PSoC5/USBFS_episr.c **** 
 370:Generated_Source\PSoC5/USBFS_episr.c ****         /* `#START EP5_USER_CODE` Place your code here */
 371:Generated_Source\PSoC5/USBFS_episr.c **** 
 372:Generated_Source\PSoC5/USBFS_episr.c ****         /* `#END` */
 373:Generated_Source\PSoC5/USBFS_episr.c **** 
 374:Generated_Source\PSoC5/USBFS_episr.c ****     #if (defined(USBFS_ENABLE_MIDI_STREAMING) && !defined(USBFS_MAIN_SERVICE_MIDI_OUT) && \
 375:Generated_Source\PSoC5/USBFS_episr.c ****                  USBFS_ISR_SERVICE_MIDI_OUT && CY_PSOC3)
 376:Generated_Source\PSoC5/USBFS_episr.c ****         {
 377:Generated_Source\PSoC5/USBFS_episr.c ****             uint8 intEn = EA;
 378:Generated_Source\PSoC5/USBFS_episr.c ****             CyGlobalIntEnable;  /* Enable nested interrupts. */
 379:Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (CY_PSOC3 && USBFS_ISR_SERVICE_MIDI_OUT) */
 380:Generated_Source\PSoC5/USBFS_episr.c **** 
 381:Generated_Source\PSoC5/USBFS_episr.c ****         USBFS_ClearSieEpInterruptSource(USBFS_SIE_INT_EP5_INTR);
 382:Generated_Source\PSoC5/USBFS_episr.c ****     
 383:Generated_Source\PSoC5/USBFS_episr.c ****         /* Notifies user that transfer IN or OUT transfer is completed.
 384:Generated_Source\PSoC5/USBFS_episr.c ****         * IN endpoint: endpoint buffer can be reloaded, Host is read data.
 385:Generated_Source\PSoC5/USBFS_episr.c ****         * OUT endpoint: data is ready to read from endpoint buffer. 
 386:Generated_Source\PSoC5/USBFS_episr.c ****         */
 387:Generated_Source\PSoC5/USBFS_episr.c ****     #if (CY_PSOC4 && USBFS_EP_MANAGEMENT_DMA_AUTO)
 388:Generated_Source\PSoC5/USBFS_episr.c ****         if (0u != (USBFS_EP[USBFS_EP5].addr & USBFS_DIR_IN))
 389:Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (USBFS_EP_MANAGEMENT_DMA_AUTO) */
 390:Generated_Source\PSoC5/USBFS_episr.c ****         {            
 391:Generated_Source\PSoC5/USBFS_episr.c ****             /* Read CR0 register to clear SIE lock. */
 392:Generated_Source\PSoC5/USBFS_episr.c ****             (void) USBFS_SIE_EP_BASE.sieEp[USBFS_EP5].epCr0;
 393:Generated_Source\PSoC5/USBFS_episr.c **** 
 394:Generated_Source\PSoC5/USBFS_episr.c ****             /* Toggle all endpoint types except ISOC. */
 395:Generated_Source\PSoC5/USBFS_episr.c ****             if (USBFS_GET_EP_TYPE(USBFS_EP5) != USBFS_EP_TYPE_ISOC)
 396:Generated_Source\PSoC5/USBFS_episr.c ****             {
 397:Generated_Source\PSoC5/USBFS_episr.c ****                 USBFS_EP[USBFS_EP5].epToggle ^= USBFS_EPX_CNT_DATA_TOGGLE;
 398:Generated_Source\PSoC5/USBFS_episr.c ****             }
 399:Generated_Source\PSoC5/USBFS_episr.c **** 
 400:Generated_Source\PSoC5/USBFS_episr.c ****             /* EP_MANAGEMENT_DMA_AUTO (Ticket ID# 214187): For OUT endpoint this event is used to n
 401:Generated_Source\PSoC5/USBFS_episr.c ****             * user that DMA has completed copying data from OUT endpoint which is not completely tr
 402:Generated_Source\PSoC5/USBFS_episr.c ****             * Because last chunk of data is being copied.
ARM GAS  C:\Users\rabbit\AppData\Local\Temp\cc9nYx0b.s 			page 10


 403:Generated_Source\PSoC5/USBFS_episr.c ****             * For CY_PSOC 3/5LP: it is acceptable as DMA is really fast.
 404:Generated_Source\PSoC5/USBFS_episr.c ****             * For CY_PSOC4: this event is set in Arbiter interrupt (source is DMA_TERMIN).
 405:Generated_Source\PSoC5/USBFS_episr.c ****             */
 406:Generated_Source\PSoC5/USBFS_episr.c ****             USBFS_EP[USBFS_EP5].apiEpState = USBFS_EVENT_PENDING;
 407:Generated_Source\PSoC5/USBFS_episr.c ****         }
 408:Generated_Source\PSoC5/USBFS_episr.c **** 
 409:Generated_Source\PSoC5/USBFS_episr.c ****     #if (!(CY_PSOC4 && USBFS_EP_MANAGEMENT_DMA_AUTO))        
 410:Generated_Source\PSoC5/USBFS_episr.c ****         #if (defined(USBFS_ENABLE_MIDI_STREAMING) && \
 411:Generated_Source\PSoC5/USBFS_episr.c ****             !defined(USBFS_MAIN_SERVICE_MIDI_OUT) && USBFS_ISR_SERVICE_MIDI_OUT)
 412:Generated_Source\PSoC5/USBFS_episr.c ****             if (USBFS_midi_out_ep == USBFS_EP5)
 413:Generated_Source\PSoC5/USBFS_episr.c ****             {
 414:Generated_Source\PSoC5/USBFS_episr.c ****                 USBFS_MIDI_OUT_Service();
 415:Generated_Source\PSoC5/USBFS_episr.c ****             }
 416:Generated_Source\PSoC5/USBFS_episr.c ****         #endif /* (USBFS_ISR_SERVICE_MIDI_OUT) */
 417:Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (!(CY_PSOC4 && USBFS_EP_MANAGEMENT_DMA_AUTO)) */
 418:Generated_Source\PSoC5/USBFS_episr.c **** 
 419:Generated_Source\PSoC5/USBFS_episr.c ****         /* `#START EP5_END_USER_CODE` Place your code here */
 420:Generated_Source\PSoC5/USBFS_episr.c **** 
 421:Generated_Source\PSoC5/USBFS_episr.c ****         /* `#END` */
 422:Generated_Source\PSoC5/USBFS_episr.c **** 
 423:Generated_Source\PSoC5/USBFS_episr.c ****     #ifdef USBFS_EP_5_ISR_EXIT_CALLBACK
 424:Generated_Source\PSoC5/USBFS_episr.c ****         USBFS_EP_5_ISR_ExitCallback();
 425:Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (USBFS_EP_5_ISR_EXIT_CALLBACK) */
 426:Generated_Source\PSoC5/USBFS_episr.c **** 
 427:Generated_Source\PSoC5/USBFS_episr.c ****     #if (CY_PSOC3 && defined(USBFS_ENABLE_MIDI_STREAMING) && \
 428:Generated_Source\PSoC5/USBFS_episr.c ****         !defined(USBFS_MAIN_SERVICE_MIDI_OUT) && USBFS_ISR_SERVICE_MIDI_OUT)
 429:Generated_Source\PSoC5/USBFS_episr.c ****         
 430:Generated_Source\PSoC5/USBFS_episr.c ****             EA = intEn; /* Restore nested interrupt configuration. */
 431:Generated_Source\PSoC5/USBFS_episr.c ****         }
 432:Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (CY_PSOC3 && USBFS_ISR_SERVICE_MIDI_OUT) */
 433:Generated_Source\PSoC5/USBFS_episr.c ****     }
 434:Generated_Source\PSoC5/USBFS_episr.c **** #endif /* (USBFS_EP5_ISR_ACTIVE) */
 435:Generated_Source\PSoC5/USBFS_episr.c **** 
 436:Generated_Source\PSoC5/USBFS_episr.c **** 
 437:Generated_Source\PSoC5/USBFS_episr.c **** #if (USBFS_EP6_ISR_ACTIVE)
 438:Generated_Source\PSoC5/USBFS_episr.c ****     /*******************************************************************************
 439:Generated_Source\PSoC5/USBFS_episr.c ****     * Function Name: USBFS_EP_6_ISR
 440:Generated_Source\PSoC5/USBFS_episr.c ****     ****************************************************************************//**
 441:Generated_Source\PSoC5/USBFS_episr.c ****     *
 442:Generated_Source\PSoC5/USBFS_episr.c ****     *  Endpoint 6 Interrupt Service Routine.
 443:Generated_Source\PSoC5/USBFS_episr.c ****     *
 444:Generated_Source\PSoC5/USBFS_episr.c ****     *
 445:Generated_Source\PSoC5/USBFS_episr.c ****     *******************************************************************************/
 446:Generated_Source\PSoC5/USBFS_episr.c ****     CY_ISR(USBFS_EP_6_ISR)
 447:Generated_Source\PSoC5/USBFS_episr.c ****     {
 448:Generated_Source\PSoC5/USBFS_episr.c ****     #ifdef USBFS_EP_6_ISR_ENTRY_CALLBACK
 449:Generated_Source\PSoC5/USBFS_episr.c ****         USBFS_EP_6_ISR_EntryCallback();
 450:Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (USBFS_EP_6_ISR_ENTRY_CALLBACK) */
 451:Generated_Source\PSoC5/USBFS_episr.c **** 
 452:Generated_Source\PSoC5/USBFS_episr.c ****         /* `#START EP6_USER_CODE` Place your code here */
 453:Generated_Source\PSoC5/USBFS_episr.c **** 
 454:Generated_Source\PSoC5/USBFS_episr.c ****         /* `#END` */
 455:Generated_Source\PSoC5/USBFS_episr.c **** 
 456:Generated_Source\PSoC5/USBFS_episr.c ****     #if (CY_PSOC3 && defined(USBFS_ENABLE_MIDI_STREAMING) && \
 457:Generated_Source\PSoC5/USBFS_episr.c ****         !defined(USBFS_MAIN_SERVICE_MIDI_OUT) && USBFS_ISR_SERVICE_MIDI_OUT)
 458:Generated_Source\PSoC5/USBFS_episr.c ****         {
 459:Generated_Source\PSoC5/USBFS_episr.c ****             uint8 intEn = EA;
ARM GAS  C:\Users\rabbit\AppData\Local\Temp\cc9nYx0b.s 			page 11


 460:Generated_Source\PSoC5/USBFS_episr.c ****             CyGlobalIntEnable;  /* Enable nested interrupts. */
 461:Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (CY_PSOC3 && USBFS_ISR_SERVICE_MIDI_OUT) */
 462:Generated_Source\PSoC5/USBFS_episr.c **** 
 463:Generated_Source\PSoC5/USBFS_episr.c ****         USBFS_ClearSieEpInterruptSource(USBFS_SIE_INT_EP6_INTR);
 464:Generated_Source\PSoC5/USBFS_episr.c ****         
 465:Generated_Source\PSoC5/USBFS_episr.c ****         /* Notifies user that transfer IN or OUT transfer is completed.
 466:Generated_Source\PSoC5/USBFS_episr.c ****         * IN endpoint: endpoint buffer can be reloaded, Host is read data.
 467:Generated_Source\PSoC5/USBFS_episr.c ****         * OUT endpoint: data is ready to read from endpoint buffer. 
 468:Generated_Source\PSoC5/USBFS_episr.c ****         */
 469:Generated_Source\PSoC5/USBFS_episr.c ****     #if (CY_PSOC4 && USBFS_EP_MANAGEMENT_DMA_AUTO)
 470:Generated_Source\PSoC5/USBFS_episr.c ****         if (0u != (USBFS_EP[USBFS_EP6].addr & USBFS_DIR_IN))
 471:Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (USBFS_EP_MANAGEMENT_DMA_AUTO) */
 472:Generated_Source\PSoC5/USBFS_episr.c ****         {
 473:Generated_Source\PSoC5/USBFS_episr.c ****             /* Read CR0 register to clear SIE lock. */
 474:Generated_Source\PSoC5/USBFS_episr.c ****             (void) USBFS_SIE_EP_BASE.sieEp[USBFS_EP6].epCr0;
 475:Generated_Source\PSoC5/USBFS_episr.c **** 
 476:Generated_Source\PSoC5/USBFS_episr.c ****             /* Toggle all endpoint types except ISOC. */
 477:Generated_Source\PSoC5/USBFS_episr.c ****             if (USBFS_GET_EP_TYPE(USBFS_EP6) != USBFS_EP_TYPE_ISOC)
 478:Generated_Source\PSoC5/USBFS_episr.c ****             {
 479:Generated_Source\PSoC5/USBFS_episr.c ****                 USBFS_EP[USBFS_EP6].epToggle ^= USBFS_EPX_CNT_DATA_TOGGLE;
 480:Generated_Source\PSoC5/USBFS_episr.c ****             }
 481:Generated_Source\PSoC5/USBFS_episr.c ****             
 482:Generated_Source\PSoC5/USBFS_episr.c ****             /* EP_MANAGEMENT_DMA_AUTO (Ticket ID# 214187): For OUT endpoint this event is used to n
 483:Generated_Source\PSoC5/USBFS_episr.c ****             * user that DMA has completed copying data from OUT endpoint which is not completely tr
 484:Generated_Source\PSoC5/USBFS_episr.c ****             * Because last chunk of data is being copied.
 485:Generated_Source\PSoC5/USBFS_episr.c ****             * For CY_PSOC 3/5LP: it is acceptable as DMA is really fast.
 486:Generated_Source\PSoC5/USBFS_episr.c ****             * For CY_PSOC4: this event is set in Arbiter interrupt (source is DMA_TERMIN).
 487:Generated_Source\PSoC5/USBFS_episr.c ****             */
 488:Generated_Source\PSoC5/USBFS_episr.c ****             USBFS_EP[USBFS_EP6].apiEpState = USBFS_EVENT_PENDING;
 489:Generated_Source\PSoC5/USBFS_episr.c ****         }
 490:Generated_Source\PSoC5/USBFS_episr.c **** 
 491:Generated_Source\PSoC5/USBFS_episr.c ****     #if (!(CY_PSOC4 && USBFS_EP_MANAGEMENT_DMA_AUTO))
 492:Generated_Source\PSoC5/USBFS_episr.c ****         #if (defined(USBFS_ENABLE_MIDI_STREAMING) && \
 493:Generated_Source\PSoC5/USBFS_episr.c ****             !defined(USBFS_MAIN_SERVICE_MIDI_OUT) && USBFS_ISR_SERVICE_MIDI_OUT)
 494:Generated_Source\PSoC5/USBFS_episr.c ****             if (USBFS_midi_out_ep == USBFS_EP6)
 495:Generated_Source\PSoC5/USBFS_episr.c ****             {
 496:Generated_Source\PSoC5/USBFS_episr.c ****                 USBFS_MIDI_OUT_Service();
 497:Generated_Source\PSoC5/USBFS_episr.c ****             }
 498:Generated_Source\PSoC5/USBFS_episr.c ****         #endif /* (USBFS_ISR_SERVICE_MIDI_OUT) */
 499:Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (!(CY_PSOC4 && USBFS_EP_MANAGEMENT_DMA_AUTO)) */
 500:Generated_Source\PSoC5/USBFS_episr.c **** 
 501:Generated_Source\PSoC5/USBFS_episr.c ****         /* `#START EP6_END_USER_CODE` Place your code here */
 502:Generated_Source\PSoC5/USBFS_episr.c **** 
 503:Generated_Source\PSoC5/USBFS_episr.c ****         /* `#END` */
 504:Generated_Source\PSoC5/USBFS_episr.c **** 
 505:Generated_Source\PSoC5/USBFS_episr.c ****     #ifdef USBFS_EP_6_ISR_EXIT_CALLBACK
 506:Generated_Source\PSoC5/USBFS_episr.c ****         USBFS_EP_6_ISR_ExitCallback();
 507:Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (USBFS_EP_6_ISR_EXIT_CALLBACK) */
 508:Generated_Source\PSoC5/USBFS_episr.c **** 
 509:Generated_Source\PSoC5/USBFS_episr.c ****     #if (CY_PSOC3 && defined(USBFS_ENABLE_MIDI_STREAMING) && \
 510:Generated_Source\PSoC5/USBFS_episr.c ****         !defined(USBFS_MAIN_SERVICE_MIDI_OUT) && USBFS_ISR_SERVICE_MIDI_OUT)
 511:Generated_Source\PSoC5/USBFS_episr.c ****         
 512:Generated_Source\PSoC5/USBFS_episr.c ****             EA = intEn; /* Restore nested interrupt configuration. */
 513:Generated_Source\PSoC5/USBFS_episr.c ****         }
 514:Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (CY_PSOC3 && USBFS_ISR_SERVICE_MIDI_OUT) */
 515:Generated_Source\PSoC5/USBFS_episr.c ****     }
 516:Generated_Source\PSoC5/USBFS_episr.c **** #endif /* (USBFS_EP6_ISR_ACTIVE) */
ARM GAS  C:\Users\rabbit\AppData\Local\Temp\cc9nYx0b.s 			page 12


 517:Generated_Source\PSoC5/USBFS_episr.c **** 
 518:Generated_Source\PSoC5/USBFS_episr.c **** 
 519:Generated_Source\PSoC5/USBFS_episr.c **** #if (USBFS_EP7_ISR_ACTIVE)
 520:Generated_Source\PSoC5/USBFS_episr.c ****     /*******************************************************************************
 521:Generated_Source\PSoC5/USBFS_episr.c ****     * Function Name: USBFS_EP_7_ISR
 522:Generated_Source\PSoC5/USBFS_episr.c ****     ****************************************************************************//**
 523:Generated_Source\PSoC5/USBFS_episr.c ****     *
 524:Generated_Source\PSoC5/USBFS_episr.c ****     *  Endpoint 7 Interrupt Service Routine.
 525:Generated_Source\PSoC5/USBFS_episr.c ****     *
 526:Generated_Source\PSoC5/USBFS_episr.c ****     *
 527:Generated_Source\PSoC5/USBFS_episr.c ****     *******************************************************************************/
 528:Generated_Source\PSoC5/USBFS_episr.c ****     CY_ISR(USBFS_EP_7_ISR)
 529:Generated_Source\PSoC5/USBFS_episr.c ****     {
 530:Generated_Source\PSoC5/USBFS_episr.c ****     #ifdef USBFS_EP_7_ISR_ENTRY_CALLBACK
 531:Generated_Source\PSoC5/USBFS_episr.c ****         USBFS_EP_7_ISR_EntryCallback();
 532:Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (USBFS_EP_7_ISR_ENTRY_CALLBACK) */
 533:Generated_Source\PSoC5/USBFS_episr.c **** 
 534:Generated_Source\PSoC5/USBFS_episr.c ****         /* `#START EP7_USER_CODE` Place your code here */
 535:Generated_Source\PSoC5/USBFS_episr.c **** 
 536:Generated_Source\PSoC5/USBFS_episr.c ****         /* `#END` */
 537:Generated_Source\PSoC5/USBFS_episr.c **** 
 538:Generated_Source\PSoC5/USBFS_episr.c ****     #if (CY_PSOC3 && defined(USBFS_ENABLE_MIDI_STREAMING) && \
 539:Generated_Source\PSoC5/USBFS_episr.c ****         !defined(USBFS_MAIN_SERVICE_MIDI_OUT) && USBFS_ISR_SERVICE_MIDI_OUT)
 540:Generated_Source\PSoC5/USBFS_episr.c ****         {
 541:Generated_Source\PSoC5/USBFS_episr.c ****             uint8 intEn = EA;
 542:Generated_Source\PSoC5/USBFS_episr.c ****             CyGlobalIntEnable;  /* Enable nested interrupts. */
 543:Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (CY_PSOC3 && USBFS_ISR_SERVICE_MIDI_OUT) */
 544:Generated_Source\PSoC5/USBFS_episr.c ****     
 545:Generated_Source\PSoC5/USBFS_episr.c ****         USBFS_ClearSieEpInterruptSource(USBFS_SIE_INT_EP7_INTR);
 546:Generated_Source\PSoC5/USBFS_episr.c ****         
 547:Generated_Source\PSoC5/USBFS_episr.c ****         /* Notifies user that transfer IN or OUT transfer is completed.
 548:Generated_Source\PSoC5/USBFS_episr.c ****         * IN endpoint: endpoint buffer can be reloaded, Host is read data.
 549:Generated_Source\PSoC5/USBFS_episr.c ****         * OUT endpoint: data is ready to read from endpoint buffer. 
 550:Generated_Source\PSoC5/USBFS_episr.c ****         */
 551:Generated_Source\PSoC5/USBFS_episr.c ****     #if (CY_PSOC4 && USBFS_EP_MANAGEMENT_DMA_AUTO)
 552:Generated_Source\PSoC5/USBFS_episr.c ****         if (0u != (USBFS_EP[USBFS_EP7].addr & USBFS_DIR_IN))
 553:Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (USBFS_EP_MANAGEMENT_DMA_AUTO) */
 554:Generated_Source\PSoC5/USBFS_episr.c ****         {           
 555:Generated_Source\PSoC5/USBFS_episr.c ****             /* Read CR0 register to clear SIE lock. */
 556:Generated_Source\PSoC5/USBFS_episr.c ****             (void) USBFS_SIE_EP_BASE.sieEp[USBFS_EP7].epCr0;
 557:Generated_Source\PSoC5/USBFS_episr.c **** 
 558:Generated_Source\PSoC5/USBFS_episr.c ****             /* Toggle all endpoint types except ISOC. */
 559:Generated_Source\PSoC5/USBFS_episr.c ****             if (USBFS_GET_EP_TYPE(USBFS_EP7) != USBFS_EP_TYPE_ISOC)
 560:Generated_Source\PSoC5/USBFS_episr.c ****             {
 561:Generated_Source\PSoC5/USBFS_episr.c ****                 USBFS_EP[USBFS_EP7].epToggle ^= USBFS_EPX_CNT_DATA_TOGGLE;
 562:Generated_Source\PSoC5/USBFS_episr.c ****             }
 563:Generated_Source\PSoC5/USBFS_episr.c ****             
 564:Generated_Source\PSoC5/USBFS_episr.c ****             /* EP_MANAGEMENT_DMA_AUTO (Ticket ID# 214187): For OUT endpoint this event is used to n
 565:Generated_Source\PSoC5/USBFS_episr.c ****             * user that DMA has completed copying data from OUT endpoint which is not completely tr
 566:Generated_Source\PSoC5/USBFS_episr.c ****             * Because last chunk of data is being copied.
 567:Generated_Source\PSoC5/USBFS_episr.c ****             * For CY_PSOC 3/5LP: it is acceptable as DMA is really fast.
 568:Generated_Source\PSoC5/USBFS_episr.c ****             * For CY_PSOC4: this event is set in Arbiter interrupt (source is DMA_TERMIN).
 569:Generated_Source\PSoC5/USBFS_episr.c ****             */
 570:Generated_Source\PSoC5/USBFS_episr.c ****             USBFS_EP[USBFS_EP7].apiEpState = USBFS_EVENT_PENDING;
 571:Generated_Source\PSoC5/USBFS_episr.c ****         }
 572:Generated_Source\PSoC5/USBFS_episr.c **** 
 573:Generated_Source\PSoC5/USBFS_episr.c **** 
ARM GAS  C:\Users\rabbit\AppData\Local\Temp\cc9nYx0b.s 			page 13


 574:Generated_Source\PSoC5/USBFS_episr.c ****     #if (!(CY_PSOC4 && USBFS_EP_MANAGEMENT_DMA_AUTO))
 575:Generated_Source\PSoC5/USBFS_episr.c ****         #if (defined(USBFS_ENABLE_MIDI_STREAMING) && \
 576:Generated_Source\PSoC5/USBFS_episr.c ****             !defined(USBFS_MAIN_SERVICE_MIDI_OUT) && USBFS_ISR_SERVICE_MIDI_OUT)
 577:Generated_Source\PSoC5/USBFS_episr.c ****             if(USBFS_midi_out_ep == USBFS_EP7)
 578:Generated_Source\PSoC5/USBFS_episr.c ****             {
 579:Generated_Source\PSoC5/USBFS_episr.c ****                 USBFS_MIDI_OUT_Service();
 580:Generated_Source\PSoC5/USBFS_episr.c ****             }
 581:Generated_Source\PSoC5/USBFS_episr.c ****         #endif /* (USBFS_ISR_SERVICE_MIDI_OUT) */
 582:Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (!(CY_PSOC4 && USBFS_EP_MANAGEMENT_DMA_AUTO)) */
 583:Generated_Source\PSoC5/USBFS_episr.c **** 
 584:Generated_Source\PSoC5/USBFS_episr.c ****         /* `#START EP7_END_USER_CODE` Place your code here */
 585:Generated_Source\PSoC5/USBFS_episr.c **** 
 586:Generated_Source\PSoC5/USBFS_episr.c ****         /* `#END` */
 587:Generated_Source\PSoC5/USBFS_episr.c **** 
 588:Generated_Source\PSoC5/USBFS_episr.c ****     #ifdef USBFS_EP_7_ISR_EXIT_CALLBACK
 589:Generated_Source\PSoC5/USBFS_episr.c ****         USBFS_EP_7_ISR_ExitCallback();
 590:Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (USBFS_EP_7_ISR_EXIT_CALLBACK) */
 591:Generated_Source\PSoC5/USBFS_episr.c **** 
 592:Generated_Source\PSoC5/USBFS_episr.c ****     #if (CY_PSOC3 && defined(USBFS_ENABLE_MIDI_STREAMING) && \
 593:Generated_Source\PSoC5/USBFS_episr.c ****         !defined(USBFS_MAIN_SERVICE_MIDI_OUT) && USBFS_ISR_SERVICE_MIDI_OUT)
 594:Generated_Source\PSoC5/USBFS_episr.c ****         
 595:Generated_Source\PSoC5/USBFS_episr.c ****             EA = intEn; /* Restore nested interrupt configuration. */
 596:Generated_Source\PSoC5/USBFS_episr.c ****         }
 597:Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (CY_PSOC3 && USBFS_ISR_SERVICE_MIDI_OUT) */
 598:Generated_Source\PSoC5/USBFS_episr.c ****     }
 599:Generated_Source\PSoC5/USBFS_episr.c **** #endif /* (USBFS_EP7_ISR_ACTIVE) */
 600:Generated_Source\PSoC5/USBFS_episr.c **** 
 601:Generated_Source\PSoC5/USBFS_episr.c **** 
 602:Generated_Source\PSoC5/USBFS_episr.c **** #if (USBFS_EP8_ISR_ACTIVE)
 603:Generated_Source\PSoC5/USBFS_episr.c ****     /*******************************************************************************
 604:Generated_Source\PSoC5/USBFS_episr.c ****     * Function Name: USBFS_EP_8_ISR
 605:Generated_Source\PSoC5/USBFS_episr.c ****     ****************************************************************************//**
 606:Generated_Source\PSoC5/USBFS_episr.c ****     *
 607:Generated_Source\PSoC5/USBFS_episr.c ****     *  Endpoint 8 Interrupt Service Routine
 608:Generated_Source\PSoC5/USBFS_episr.c ****     *
 609:Generated_Source\PSoC5/USBFS_episr.c ****     *
 610:Generated_Source\PSoC5/USBFS_episr.c ****     *******************************************************************************/
 611:Generated_Source\PSoC5/USBFS_episr.c ****     CY_ISR(USBFS_EP_8_ISR)
 612:Generated_Source\PSoC5/USBFS_episr.c ****     {
 613:Generated_Source\PSoC5/USBFS_episr.c ****     #ifdef USBFS_EP_8_ISR_ENTRY_CALLBACK
 614:Generated_Source\PSoC5/USBFS_episr.c ****         USBFS_EP_8_ISR_EntryCallback();
 615:Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (USBFS_EP_8_ISR_ENTRY_CALLBACK) */
 616:Generated_Source\PSoC5/USBFS_episr.c **** 
 617:Generated_Source\PSoC5/USBFS_episr.c ****         /* `#START EP8_USER_CODE` Place your code here */
 618:Generated_Source\PSoC5/USBFS_episr.c **** 
 619:Generated_Source\PSoC5/USBFS_episr.c ****         /* `#END` */
 620:Generated_Source\PSoC5/USBFS_episr.c **** 
 621:Generated_Source\PSoC5/USBFS_episr.c ****     #if (CY_PSOC3 && defined(USBFS_ENABLE_MIDI_STREAMING) && \
 622:Generated_Source\PSoC5/USBFS_episr.c ****         !defined(USBFS_MAIN_SERVICE_MIDI_OUT) && USBFS_ISR_SERVICE_MIDI_OUT)
 623:Generated_Source\PSoC5/USBFS_episr.c ****         {
 624:Generated_Source\PSoC5/USBFS_episr.c ****             uint8 intEn = EA;
 625:Generated_Source\PSoC5/USBFS_episr.c ****             CyGlobalIntEnable;  /* Enable nested interrupts. */
 626:Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (CY_PSOC3 && USBFS_ISR_SERVICE_MIDI_OUT) */
 627:Generated_Source\PSoC5/USBFS_episr.c **** 
 628:Generated_Source\PSoC5/USBFS_episr.c ****         USBFS_ClearSieEpInterruptSource(USBFS_SIE_INT_EP8_INTR);
 629:Generated_Source\PSoC5/USBFS_episr.c ****         
 630:Generated_Source\PSoC5/USBFS_episr.c ****         /* Notifies user that transfer IN or OUT transfer is completed.
ARM GAS  C:\Users\rabbit\AppData\Local\Temp\cc9nYx0b.s 			page 14


 631:Generated_Source\PSoC5/USBFS_episr.c ****         * IN endpoint: endpoint buffer can be reloaded, Host is read data.
 632:Generated_Source\PSoC5/USBFS_episr.c ****         * OUT endpoint: data is ready to read from endpoint buffer. 
 633:Generated_Source\PSoC5/USBFS_episr.c ****         */
 634:Generated_Source\PSoC5/USBFS_episr.c ****     #if (CY_PSOC4 && USBFS_EP_MANAGEMENT_DMA_AUTO)
 635:Generated_Source\PSoC5/USBFS_episr.c ****         if (0u != (USBFS_EP[USBFS_EP8].addr & USBFS_DIR_IN))
 636:Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (USBFS_EP_MANAGEMENT_DMA_AUTO) */
 637:Generated_Source\PSoC5/USBFS_episr.c ****         {
 638:Generated_Source\PSoC5/USBFS_episr.c ****             /* Read CR0 register to clear SIE lock. */
 639:Generated_Source\PSoC5/USBFS_episr.c ****             (void) USBFS_SIE_EP_BASE.sieEp[USBFS_EP8].epCr0;
 640:Generated_Source\PSoC5/USBFS_episr.c **** 
 641:Generated_Source\PSoC5/USBFS_episr.c ****             /* Toggle all endpoint types except ISOC. */
 642:Generated_Source\PSoC5/USBFS_episr.c ****             if (USBFS_GET_EP_TYPE(USBFS_EP8) != USBFS_EP_TYPE_ISOC)
 643:Generated_Source\PSoC5/USBFS_episr.c ****             {
 644:Generated_Source\PSoC5/USBFS_episr.c ****                 USBFS_EP[USBFS_EP8].epToggle ^= USBFS_EPX_CNT_DATA_TOGGLE;
 645:Generated_Source\PSoC5/USBFS_episr.c ****             }
 646:Generated_Source\PSoC5/USBFS_episr.c **** 
 647:Generated_Source\PSoC5/USBFS_episr.c ****             /* EP_MANAGEMENT_DMA_AUTO (Ticket ID# 214187): For OUT endpoint this event is used to n
 648:Generated_Source\PSoC5/USBFS_episr.c ****             * user that DMA has completed copying data from OUT endpoint which is not completely tr
 649:Generated_Source\PSoC5/USBFS_episr.c ****             * Because last chunk of data is being copied.
 650:Generated_Source\PSoC5/USBFS_episr.c ****             * For CY_PSOC 3/5LP: it is acceptable as DMA is really fast.
 651:Generated_Source\PSoC5/USBFS_episr.c ****             * For CY_PSOC4: this event is set in Arbiter interrupt (source is DMA_TERMIN).
 652:Generated_Source\PSoC5/USBFS_episr.c ****             */
 653:Generated_Source\PSoC5/USBFS_episr.c ****             USBFS_EP[USBFS_EP8].apiEpState = USBFS_EVENT_PENDING;
 654:Generated_Source\PSoC5/USBFS_episr.c ****         }
 655:Generated_Source\PSoC5/USBFS_episr.c **** 
 656:Generated_Source\PSoC5/USBFS_episr.c ****     #if (!(CY_PSOC4 && USBFS_EP_MANAGEMENT_DMA_AUTO))
 657:Generated_Source\PSoC5/USBFS_episr.c ****         #if (defined(USBFS_ENABLE_MIDI_STREAMING) && \
 658:Generated_Source\PSoC5/USBFS_episr.c ****             !defined(USBFS_MAIN_SERVICE_MIDI_OUT) && USBFS_ISR_SERVICE_MIDI_OUT)
 659:Generated_Source\PSoC5/USBFS_episr.c ****             if (USBFS_midi_out_ep == USBFS_EP8)
 660:Generated_Source\PSoC5/USBFS_episr.c ****             {
 661:Generated_Source\PSoC5/USBFS_episr.c ****                 USBFS_MIDI_OUT_Service();
 662:Generated_Source\PSoC5/USBFS_episr.c ****             }
 663:Generated_Source\PSoC5/USBFS_episr.c ****         #endif /* (USBFS_ISR_SERVICE_MIDI_OUT) */
 664:Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (!(CY_PSOC4 && USBFS_EP_MANAGEMENT_DMA_AUTO)) */
 665:Generated_Source\PSoC5/USBFS_episr.c **** 
 666:Generated_Source\PSoC5/USBFS_episr.c ****         /* `#START EP8_END_USER_CODE` Place your code here */
 667:Generated_Source\PSoC5/USBFS_episr.c **** 
 668:Generated_Source\PSoC5/USBFS_episr.c ****         /* `#END` */
 669:Generated_Source\PSoC5/USBFS_episr.c **** 
 670:Generated_Source\PSoC5/USBFS_episr.c ****     #ifdef USBFS_EP_8_ISR_EXIT_CALLBACK
 671:Generated_Source\PSoC5/USBFS_episr.c ****         USBFS_EP_8_ISR_ExitCallback();
 672:Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (USBFS_EP_8_ISR_EXIT_CALLBACK) */
 673:Generated_Source\PSoC5/USBFS_episr.c **** 
 674:Generated_Source\PSoC5/USBFS_episr.c ****     #if (CY_PSOC3 && defined(USBFS_ENABLE_MIDI_STREAMING) && \
 675:Generated_Source\PSoC5/USBFS_episr.c ****         !defined(USBFS_MAIN_SERVICE_MIDI_OUT) && USBFS_ISR_SERVICE_MIDI_OUT)
 676:Generated_Source\PSoC5/USBFS_episr.c ****         
 677:Generated_Source\PSoC5/USBFS_episr.c ****             EA = intEn; /* Restore nested interrupt configuration. */
 678:Generated_Source\PSoC5/USBFS_episr.c ****         }
 679:Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (CY_PSOC3 && USBFS_ISR_SERVICE_MIDI_OUT) */
 680:Generated_Source\PSoC5/USBFS_episr.c ****     }
 681:Generated_Source\PSoC5/USBFS_episr.c **** #endif /* (USBFS_EP8_ISR_ACTIVE) */
 682:Generated_Source\PSoC5/USBFS_episr.c **** 
 683:Generated_Source\PSoC5/USBFS_episr.c **** 
 684:Generated_Source\PSoC5/USBFS_episr.c **** #if (USBFS_SOF_ISR_ACTIVE)
 685:Generated_Source\PSoC5/USBFS_episr.c ****     /*******************************************************************************
 686:Generated_Source\PSoC5/USBFS_episr.c ****     * Function Name: USBFS_SOF_ISR
 687:Generated_Source\PSoC5/USBFS_episr.c ****     ****************************************************************************//**
ARM GAS  C:\Users\rabbit\AppData\Local\Temp\cc9nYx0b.s 			page 15


 688:Generated_Source\PSoC5/USBFS_episr.c ****     *
 689:Generated_Source\PSoC5/USBFS_episr.c ****     *  Start of Frame Interrupt Service Routine.
 690:Generated_Source\PSoC5/USBFS_episr.c ****     *
 691:Generated_Source\PSoC5/USBFS_episr.c ****     *
 692:Generated_Source\PSoC5/USBFS_episr.c ****     *******************************************************************************/
 693:Generated_Source\PSoC5/USBFS_episr.c ****     CY_ISR(USBFS_SOF_ISR)
 694:Generated_Source\PSoC5/USBFS_episr.c ****     {
 112              		.loc 1 694 0
 113              		.cfi_startproc
 114              		@ args = 0, pretend = 0, frame = 0
 115              		@ frame_needed = 0, uses_anonymous_args = 0
 116              		@ link register save eliminated.
 117 0000 7047     		bx	lr
 118              		.cfi_endproc
 119              	.LFE2:
 120              		.size	USBFS_SOF_ISR, .-USBFS_SOF_ISR
 121              		.section	.text.USBFS_BUS_RESET_ISR,"ax",%progbits
 122              		.align	1
 123              		.global	USBFS_BUS_RESET_ISR
 124              		.thumb
 125              		.thumb_func
 126              		.type	USBFS_BUS_RESET_ISR, %function
 127              	USBFS_BUS_RESET_ISR:
 128              	.LFB3:
 695:Generated_Source\PSoC5/USBFS_episr.c ****     #ifdef USBFS_SOF_ISR_ENTRY_CALLBACK
 696:Generated_Source\PSoC5/USBFS_episr.c ****         USBFS_SOF_ISR_EntryCallback();
 697:Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (USBFS_SOF_ISR_ENTRY_CALLBACK) */
 698:Generated_Source\PSoC5/USBFS_episr.c **** 
 699:Generated_Source\PSoC5/USBFS_episr.c ****         /* `#START SOF_USER_CODE` Place your code here */
 700:Generated_Source\PSoC5/USBFS_episr.c **** 
 701:Generated_Source\PSoC5/USBFS_episr.c ****         /* `#END` */
 702:Generated_Source\PSoC5/USBFS_episr.c **** 
 703:Generated_Source\PSoC5/USBFS_episr.c ****         USBFS_ClearSieInterruptSource(USBFS_INTR_SIE_SOF_INTR);
 704:Generated_Source\PSoC5/USBFS_episr.c **** 
 705:Generated_Source\PSoC5/USBFS_episr.c ****     #ifdef USBFS_SOF_ISR_EXIT_CALLBACK
 706:Generated_Source\PSoC5/USBFS_episr.c ****         USBFS_SOF_ISR_ExitCallback();
 707:Generated_Source\PSoC5/USBFS_episr.c ****     #endif /* (USBFS_SOF_ISR_EXIT_CALLBACK) */
 708:Generated_Source\PSoC5/USBFS_episr.c ****     }
 709:Generated_Source\PSoC5/USBFS_episr.c **** #endif /* (USBFS_SOF_ISR_ACTIVE) */
 710:Generated_Source\PSoC5/USBFS_episr.c **** 
 711:Generated_Source\PSoC5/USBFS_episr.c **** 
 712:Generated_Source\PSoC5/USBFS_episr.c **** #if (USBFS_BUS_RESET_ISR_ACTIVE)
 713:Generated_Source\PSoC5/USBFS_episr.c **** /*******************************************************************************
 714:Generated_Source\PSoC5/USBFS_episr.c **** * Function Name: USBFS_BUS_RESET_ISR
 715:Generated_Source\PSoC5/USBFS_episr.c **** ****************************************************************************//**
 716:Generated_Source\PSoC5/USBFS_episr.c **** *
 717:Generated_Source\PSoC5/USBFS_episr.c **** *  USB Bus Reset Interrupt Service Routine.  Calls _Start with the same
 718:Generated_Source\PSoC5/USBFS_episr.c **** *  parameters as the last USER call to _Start
 719:Generated_Source\PSoC5/USBFS_episr.c **** *
 720:Generated_Source\PSoC5/USBFS_episr.c **** *
 721:Generated_Source\PSoC5/USBFS_episr.c **** *******************************************************************************/
 722:Generated_Source\PSoC5/USBFS_episr.c **** CY_ISR(USBFS_BUS_RESET_ISR)
 723:Generated_Source\PSoC5/USBFS_episr.c **** {
 129              		.loc 1 723 0
 130              		.cfi_startproc
 131              		@ args = 0, pretend = 0, frame = 0
 132              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\Users\rabbit\AppData\Local\Temp\cc9nYx0b.s 			page 16


 133              		@ link register save eliminated.
 724:Generated_Source\PSoC5/USBFS_episr.c **** #ifdef USBFS_BUS_RESET_ISR_ENTRY_CALLBACK
 725:Generated_Source\PSoC5/USBFS_episr.c ****     USBFS_BUS_RESET_ISR_EntryCallback();
 726:Generated_Source\PSoC5/USBFS_episr.c **** #endif /* (USBFS_BUS_RESET_ISR_ENTRY_CALLBACK) */
 727:Generated_Source\PSoC5/USBFS_episr.c **** 
 728:Generated_Source\PSoC5/USBFS_episr.c ****     /* `#START BUS_RESET_USER_CODE` Place your code here */
 729:Generated_Source\PSoC5/USBFS_episr.c **** 
 730:Generated_Source\PSoC5/USBFS_episr.c ****     /* `#END` */
 731:Generated_Source\PSoC5/USBFS_episr.c **** 
 732:Generated_Source\PSoC5/USBFS_episr.c ****     USBFS_ClearSieInterruptSource(USBFS_INTR_SIE_BUS_RESET_INTR);
 733:Generated_Source\PSoC5/USBFS_episr.c **** 
 734:Generated_Source\PSoC5/USBFS_episr.c ****     USBFS_ReInitComponent();
 134              		.loc 1 734 0
 135 0000 FFF7FEBF 		b	USBFS_ReInitComponent
 136              	.LVL0:
 137              		.cfi_endproc
 138              	.LFE3:
 139              		.size	USBFS_BUS_RESET_ISR, .-USBFS_BUS_RESET_ISR
 140              		.text
 141              	.Letext0:
 142              		.file 2 "Generated_Source\\PSoC5\\cytypes.h"
 143              		.file 3 "Generated_Source\\PSoC5\\USBFS.h"
 144              		.file 4 "Generated_Source\\PSoC5\\USBFS_pvt.h"
 145              		.section	.debug_info,"",%progbits
 146              	.Ldebug_info0:
 147 0000 3F020000 		.4byte	0x23f
 148 0004 0400     		.2byte	0x4
 149 0006 00000000 		.4byte	.Ldebug_abbrev0
 150 000a 04       		.byte	0x4
 151 000b 01       		.uleb128 0x1
 152 000c B8000000 		.4byte	.LASF36
 153 0010 0C       		.byte	0xc
 154 0011 35000000 		.4byte	.LASF37
 155 0015 F9010000 		.4byte	.LASF38
 156 0019 00000000 		.4byte	.Ldebug_ranges0+0
 157 001d 00000000 		.4byte	0
 158 0021 00000000 		.4byte	.Ldebug_line0
 159 0025 02       		.uleb128 0x2
 160 0026 01       		.byte	0x1
 161 0027 06       		.byte	0x6
 162 0028 BF020000 		.4byte	.LASF0
 163 002c 02       		.uleb128 0x2
 164 002d 01       		.byte	0x1
 165 002e 08       		.byte	0x8
 166 002f 9A000000 		.4byte	.LASF1
 167 0033 02       		.uleb128 0x2
 168 0034 02       		.byte	0x2
 169 0035 05       		.byte	0x5
 170 0036 81020000 		.4byte	.LASF2
 171 003a 02       		.uleb128 0x2
 172 003b 02       		.byte	0x2
 173 003c 07       		.byte	0x7
 174 003d 22000000 		.4byte	.LASF3
 175 0041 02       		.uleb128 0x2
 176 0042 04       		.byte	0x4
 177 0043 05       		.byte	0x5
 178 0044 9B020000 		.4byte	.LASF4
ARM GAS  C:\Users\rabbit\AppData\Local\Temp\cc9nYx0b.s 			page 17


 179 0048 02       		.uleb128 0x2
 180 0049 04       		.byte	0x4
 181 004a 07       		.byte	0x7
 182 004b AA010000 		.4byte	.LASF5
 183 004f 02       		.uleb128 0x2
 184 0050 08       		.byte	0x8
 185 0051 05       		.byte	0x5
 186 0052 63020000 		.4byte	.LASF6
 187 0056 02       		.uleb128 0x2
 188 0057 08       		.byte	0x8
 189 0058 07       		.byte	0x7
 190 0059 C9010000 		.4byte	.LASF7
 191 005d 03       		.uleb128 0x3
 192 005e 04       		.byte	0x4
 193 005f 05       		.byte	0x5
 194 0060 696E7400 		.ascii	"int\000"
 195 0064 02       		.uleb128 0x2
 196 0065 04       		.byte	0x4
 197 0066 07       		.byte	0x7
 198 0067 BC010000 		.4byte	.LASF8
 199 006b 04       		.uleb128 0x4
 200 006c 8B020000 		.4byte	.LASF9
 201 0070 02       		.byte	0x2
 202 0071 E901     		.2byte	0x1e9
 203 0073 2C000000 		.4byte	0x2c
 204 0077 04       		.uleb128 0x4
 205 0078 8E010000 		.4byte	.LASF10
 206 007c 02       		.byte	0x2
 207 007d EA01     		.2byte	0x1ea
 208 007f 3A000000 		.4byte	0x3a
 209 0083 02       		.uleb128 0x2
 210 0084 04       		.byte	0x4
 211 0085 04       		.byte	0x4
 212 0086 1C000000 		.4byte	.LASF11
 213 008a 02       		.uleb128 0x2
 214 008b 08       		.byte	0x8
 215 008c 04       		.byte	0x4
 216 008d 68010000 		.4byte	.LASF12
 217 0091 02       		.uleb128 0x2
 218 0092 01       		.byte	0x1
 219 0093 08       		.byte	0x8
 220 0094 71020000 		.4byte	.LASF13
 221 0098 04       		.uleb128 0x4
 222 0099 A8000000 		.4byte	.LASF14
 223 009d 02       		.byte	0x2
 224 009e 9302     		.2byte	0x293
 225 00a0 A4000000 		.4byte	0xa4
 226 00a4 05       		.uleb128 0x5
 227 00a5 6B000000 		.4byte	0x6b
 228 00a9 02       		.uleb128 0x2
 229 00aa 08       		.byte	0x8
 230 00ab 04       		.byte	0x4
 231 00ac B3020000 		.4byte	.LASF15
 232 00b0 02       		.uleb128 0x2
 233 00b1 04       		.byte	0x4
 234 00b2 07       		.byte	0x7
 235 00b3 4C020000 		.4byte	.LASF16
ARM GAS  C:\Users\rabbit\AppData\Local\Temp\cc9nYx0b.s 			page 18


 236 00b7 06       		.uleb128 0x6
 237 00b8 0C       		.byte	0xc
 238 00b9 03       		.byte	0x3
 239 00ba 93       		.byte	0x93
 240 00bb 2C010000 		.4byte	0x12c
 241 00bf 07       		.uleb128 0x7
 242 00c0 55020000 		.4byte	.LASF17
 243 00c4 03       		.byte	0x3
 244 00c5 95       		.byte	0x95
 245 00c6 6B000000 		.4byte	0x6b
 246 00ca 00       		.byte	0
 247 00cb 07       		.uleb128 0x7
 248 00cc AD000000 		.4byte	.LASF18
 249 00d0 03       		.byte	0x3
 250 00d1 96       		.byte	0x96
 251 00d2 6B000000 		.4byte	0x6b
 252 00d6 01       		.byte	0x1
 253 00d7 07       		.uleb128 0x7
 254 00d8 E0010000 		.4byte	.LASF19
 255 00dc 03       		.byte	0x3
 256 00dd 97       		.byte	0x97
 257 00de 6B000000 		.4byte	0x6b
 258 00e2 02       		.byte	0x2
 259 00e3 07       		.uleb128 0x7
 260 00e4 91000000 		.4byte	.LASF20
 261 00e8 03       		.byte	0x3
 262 00e9 98       		.byte	0x98
 263 00ea 6B000000 		.4byte	0x6b
 264 00ee 03       		.byte	0x3
 265 00ef 07       		.uleb128 0x7
 266 00f0 46010000 		.4byte	.LASF21
 267 00f4 03       		.byte	0x3
 268 00f5 99       		.byte	0x99
 269 00f6 6B000000 		.4byte	0x6b
 270 00fa 04       		.byte	0x4
 271 00fb 07       		.uleb128 0x7
 272 00fc 5C020000 		.4byte	.LASF22
 273 0100 03       		.byte	0x3
 274 0101 9A       		.byte	0x9a
 275 0102 6B000000 		.4byte	0x6b
 276 0106 05       		.byte	0x5
 277 0107 07       		.uleb128 0x7
 278 0108 83010000 		.4byte	.LASF23
 279 010c 03       		.byte	0x3
 280 010d 9B       		.byte	0x9b
 281 010e 77000000 		.4byte	0x77
 282 0112 06       		.byte	0x6
 283 0113 07       		.uleb128 0x7
 284 0114 76020000 		.4byte	.LASF24
 285 0118 03       		.byte	0x3
 286 0119 9C       		.byte	0x9c
 287 011a 77000000 		.4byte	0x77
 288 011e 08       		.byte	0x8
 289 011f 07       		.uleb128 0x7
 290 0120 91020000 		.4byte	.LASF25
 291 0124 03       		.byte	0x3
 292 0125 9D       		.byte	0x9d
ARM GAS  C:\Users\rabbit\AppData\Local\Temp\cc9nYx0b.s 			page 19


 293 0126 6B000000 		.4byte	0x6b
 294 012a 0A       		.byte	0xa
 295 012b 00       		.byte	0
 296 012c 08       		.uleb128 0x8
 297 012d 5A000000 		.4byte	.LASF26
 298 0131 03       		.byte	0x3
 299 0132 9E       		.byte	0x9e
 300 0133 B7000000 		.4byte	0xb7
 301 0137 06       		.uleb128 0x6
 302 0138 10       		.byte	0x10
 303 0139 03       		.byte	0x3
 304 013a DA       		.byte	0xda
 305 013b 70010000 		.4byte	0x170
 306 013f 07       		.uleb128 0x7
 307 0140 83000000 		.4byte	.LASF27
 308 0144 03       		.byte	0x3
 309 0145 DC       		.byte	0xdc
 310 0146 6B000000 		.4byte	0x6b
 311 014a 00       		.byte	0
 312 014b 07       		.uleb128 0x7
 313 014c 8A000000 		.4byte	.LASF28
 314 0150 03       		.byte	0x3
 315 0151 DD       		.byte	0xdd
 316 0152 6B000000 		.4byte	0x6b
 317 0156 01       		.byte	0x1
 318 0157 07       		.uleb128 0x7
 319 0158 16000000 		.4byte	.LASF29
 320 015c 03       		.byte	0x3
 321 015d DE       		.byte	0xde
 322 015e 6B000000 		.4byte	0x6b
 323 0162 02       		.byte	0x2
 324 0163 09       		.uleb128 0x9
 325 0164 67617000 		.ascii	"gap\000"
 326 0168 03       		.byte	0x3
 327 0169 DF       		.byte	0xdf
 328 016a 70010000 		.4byte	0x170
 329 016e 03       		.byte	0x3
 330 016f 00       		.byte	0
 331 0170 0A       		.uleb128 0xa
 332 0171 6B000000 		.4byte	0x6b
 333 0175 80010000 		.4byte	0x180
 334 0179 0B       		.uleb128 0xb
 335 017a B0000000 		.4byte	0xb0
 336 017e 0C       		.byte	0xc
 337 017f 00       		.byte	0
 338 0180 08       		.uleb128 0x8
 339 0181 6F010000 		.4byte	.LASF30
 340 0185 03       		.byte	0x3
 341 0186 E0       		.byte	0xe0
 342 0187 37010000 		.4byte	0x137
 343 018b 0C       		.uleb128 0xc
 344 018c 90       		.byte	0x90
 345 018d 03       		.byte	0x3
 346 018e 1401     		.2byte	0x114
 347 0190 A2010000 		.4byte	0x1a2
 348 0194 0D       		.uleb128 0xd
 349 0195 59010000 		.4byte	.LASF31
ARM GAS  C:\Users\rabbit\AppData\Local\Temp\cc9nYx0b.s 			page 20


 350 0199 03       		.byte	0x3
 351 019a 1601     		.2byte	0x116
 352 019c A2010000 		.4byte	0x1a2
 353 01a0 00       		.byte	0
 354 01a1 00       		.byte	0
 355 01a2 0A       		.uleb128 0xa
 356 01a3 80010000 		.4byte	0x180
 357 01a7 B2010000 		.4byte	0x1b2
 358 01ab 0B       		.uleb128 0xb
 359 01ac B0000000 		.4byte	0xb0
 360 01b0 08       		.byte	0x8
 361 01b1 00       		.byte	0
 362 01b2 04       		.uleb128 0x4
 363 01b3 95010000 		.4byte	.LASF32
 364 01b7 03       		.byte	0x3
 365 01b8 1701     		.2byte	0x117
 366 01ba 8B010000 		.4byte	0x18b
 367 01be 0E       		.uleb128 0xe
 368 01bf EA010000 		.4byte	.LASF33
 369 01c3 01       		.byte	0x1
 370 01c4 25       		.byte	0x25
 371 01c5 00000000 		.4byte	.LFB0
 372 01c9 2C000000 		.4byte	.LFE0-.LFB0
 373 01cd 01       		.uleb128 0x1
 374 01ce 9C       		.byte	0x9c
 375 01cf 0E       		.uleb128 0xe
 376 01d0 A4020000 		.4byte	.LASF34
 377 01d4 01       		.byte	0x1
 378 01d5 78       		.byte	0x78
 379 01d6 00000000 		.4byte	.LFB1
 380 01da 30000000 		.4byte	.LFE1-.LFB1
 381 01de 01       		.uleb128 0x1
 382 01df 9C       		.byte	0x9c
 383 01e0 0F       		.uleb128 0xf
 384 01e1 4B010000 		.4byte	.LASF35
 385 01e5 01       		.byte	0x1
 386 01e6 B502     		.2byte	0x2b5
 387 01e8 00000000 		.4byte	.LFB2
 388 01ec 02000000 		.4byte	.LFE2-.LFB2
 389 01f0 01       		.uleb128 0x1
 390 01f1 9C       		.byte	0x9c
 391 01f2 10       		.uleb128 0x10
 392 01f3 6F000000 		.4byte	.LASF39
 393 01f7 01       		.byte	0x1
 394 01f8 D202     		.2byte	0x2d2
 395 01fa 00000000 		.4byte	.LFB3
 396 01fe 04000000 		.4byte	.LFE3-.LFB3
 397 0202 01       		.uleb128 0x1
 398 0203 9C       		.byte	0x9c
 399 0204 12020000 		.4byte	0x212
 400 0208 11       		.uleb128 0x11
 401 0209 04000000 		.4byte	.LVL0
 402 020d 37020000 		.4byte	0x237
 403 0211 00       		.byte	0
 404 0212 0A       		.uleb128 0xa
 405 0213 22020000 		.4byte	0x222
 406 0217 22020000 		.4byte	0x222
ARM GAS  C:\Users\rabbit\AppData\Local\Temp\cc9nYx0b.s 			page 21


 407 021b 0B       		.uleb128 0xb
 408 021c B0000000 		.4byte	0xb0
 409 0220 08       		.byte	0x8
 410 0221 00       		.byte	0
 411 0222 05       		.uleb128 0x5
 412 0223 2C010000 		.4byte	0x12c
 413 0227 12       		.uleb128 0x12
 414 0228 5F010000 		.4byte	.LASF40
 415 022c 04       		.byte	0x4
 416 022d 84       		.byte	0x84
 417 022e 32020000 		.4byte	0x232
 418 0232 05       		.uleb128 0x5
 419 0233 12020000 		.4byte	0x212
 420 0237 13       		.uleb128 0x13
 421 0238 00000000 		.4byte	.LASF41
 422 023c 00000000 		.4byte	.LASF41
 423 0240 04       		.byte	0x4
 424 0241 AF       		.byte	0xaf
 425 0242 00       		.byte	0
 426              		.section	.debug_abbrev,"",%progbits
 427              	.Ldebug_abbrev0:
 428 0000 01       		.uleb128 0x1
 429 0001 11       		.uleb128 0x11
 430 0002 01       		.byte	0x1
 431 0003 25       		.uleb128 0x25
 432 0004 0E       		.uleb128 0xe
 433 0005 13       		.uleb128 0x13
 434 0006 0B       		.uleb128 0xb
 435 0007 03       		.uleb128 0x3
 436 0008 0E       		.uleb128 0xe
 437 0009 1B       		.uleb128 0x1b
 438 000a 0E       		.uleb128 0xe
 439 000b 55       		.uleb128 0x55
 440 000c 17       		.uleb128 0x17
 441 000d 11       		.uleb128 0x11
 442 000e 01       		.uleb128 0x1
 443 000f 10       		.uleb128 0x10
 444 0010 17       		.uleb128 0x17
 445 0011 00       		.byte	0
 446 0012 00       		.byte	0
 447 0013 02       		.uleb128 0x2
 448 0014 24       		.uleb128 0x24
 449 0015 00       		.byte	0
 450 0016 0B       		.uleb128 0xb
 451 0017 0B       		.uleb128 0xb
 452 0018 3E       		.uleb128 0x3e
 453 0019 0B       		.uleb128 0xb
 454 001a 03       		.uleb128 0x3
 455 001b 0E       		.uleb128 0xe
 456 001c 00       		.byte	0
 457 001d 00       		.byte	0
 458 001e 03       		.uleb128 0x3
 459 001f 24       		.uleb128 0x24
 460 0020 00       		.byte	0
 461 0021 0B       		.uleb128 0xb
 462 0022 0B       		.uleb128 0xb
 463 0023 3E       		.uleb128 0x3e
ARM GAS  C:\Users\rabbit\AppData\Local\Temp\cc9nYx0b.s 			page 22


 464 0024 0B       		.uleb128 0xb
 465 0025 03       		.uleb128 0x3
 466 0026 08       		.uleb128 0x8
 467 0027 00       		.byte	0
 468 0028 00       		.byte	0
 469 0029 04       		.uleb128 0x4
 470 002a 16       		.uleb128 0x16
 471 002b 00       		.byte	0
 472 002c 03       		.uleb128 0x3
 473 002d 0E       		.uleb128 0xe
 474 002e 3A       		.uleb128 0x3a
 475 002f 0B       		.uleb128 0xb
 476 0030 3B       		.uleb128 0x3b
 477 0031 05       		.uleb128 0x5
 478 0032 49       		.uleb128 0x49
 479 0033 13       		.uleb128 0x13
 480 0034 00       		.byte	0
 481 0035 00       		.byte	0
 482 0036 05       		.uleb128 0x5
 483 0037 35       		.uleb128 0x35
 484 0038 00       		.byte	0
 485 0039 49       		.uleb128 0x49
 486 003a 13       		.uleb128 0x13
 487 003b 00       		.byte	0
 488 003c 00       		.byte	0
 489 003d 06       		.uleb128 0x6
 490 003e 13       		.uleb128 0x13
 491 003f 01       		.byte	0x1
 492 0040 0B       		.uleb128 0xb
 493 0041 0B       		.uleb128 0xb
 494 0042 3A       		.uleb128 0x3a
 495 0043 0B       		.uleb128 0xb
 496 0044 3B       		.uleb128 0x3b
 497 0045 0B       		.uleb128 0xb
 498 0046 01       		.uleb128 0x1
 499 0047 13       		.uleb128 0x13
 500 0048 00       		.byte	0
 501 0049 00       		.byte	0
 502 004a 07       		.uleb128 0x7
 503 004b 0D       		.uleb128 0xd
 504 004c 00       		.byte	0
 505 004d 03       		.uleb128 0x3
 506 004e 0E       		.uleb128 0xe
 507 004f 3A       		.uleb128 0x3a
 508 0050 0B       		.uleb128 0xb
 509 0051 3B       		.uleb128 0x3b
 510 0052 0B       		.uleb128 0xb
 511 0053 49       		.uleb128 0x49
 512 0054 13       		.uleb128 0x13
 513 0055 38       		.uleb128 0x38
 514 0056 0B       		.uleb128 0xb
 515 0057 00       		.byte	0
 516 0058 00       		.byte	0
 517 0059 08       		.uleb128 0x8
 518 005a 16       		.uleb128 0x16
 519 005b 00       		.byte	0
 520 005c 03       		.uleb128 0x3
ARM GAS  C:\Users\rabbit\AppData\Local\Temp\cc9nYx0b.s 			page 23


 521 005d 0E       		.uleb128 0xe
 522 005e 3A       		.uleb128 0x3a
 523 005f 0B       		.uleb128 0xb
 524 0060 3B       		.uleb128 0x3b
 525 0061 0B       		.uleb128 0xb
 526 0062 49       		.uleb128 0x49
 527 0063 13       		.uleb128 0x13
 528 0064 00       		.byte	0
 529 0065 00       		.byte	0
 530 0066 09       		.uleb128 0x9
 531 0067 0D       		.uleb128 0xd
 532 0068 00       		.byte	0
 533 0069 03       		.uleb128 0x3
 534 006a 08       		.uleb128 0x8
 535 006b 3A       		.uleb128 0x3a
 536 006c 0B       		.uleb128 0xb
 537 006d 3B       		.uleb128 0x3b
 538 006e 0B       		.uleb128 0xb
 539 006f 49       		.uleb128 0x49
 540 0070 13       		.uleb128 0x13
 541 0071 38       		.uleb128 0x38
 542 0072 0B       		.uleb128 0xb
 543 0073 00       		.byte	0
 544 0074 00       		.byte	0
 545 0075 0A       		.uleb128 0xa
 546 0076 01       		.uleb128 0x1
 547 0077 01       		.byte	0x1
 548 0078 49       		.uleb128 0x49
 549 0079 13       		.uleb128 0x13
 550 007a 01       		.uleb128 0x1
 551 007b 13       		.uleb128 0x13
 552 007c 00       		.byte	0
 553 007d 00       		.byte	0
 554 007e 0B       		.uleb128 0xb
 555 007f 21       		.uleb128 0x21
 556 0080 00       		.byte	0
 557 0081 49       		.uleb128 0x49
 558 0082 13       		.uleb128 0x13
 559 0083 2F       		.uleb128 0x2f
 560 0084 0B       		.uleb128 0xb
 561 0085 00       		.byte	0
 562 0086 00       		.byte	0
 563 0087 0C       		.uleb128 0xc
 564 0088 13       		.uleb128 0x13
 565 0089 01       		.byte	0x1
 566 008a 0B       		.uleb128 0xb
 567 008b 0B       		.uleb128 0xb
 568 008c 3A       		.uleb128 0x3a
 569 008d 0B       		.uleb128 0xb
 570 008e 3B       		.uleb128 0x3b
 571 008f 05       		.uleb128 0x5
 572 0090 01       		.uleb128 0x1
 573 0091 13       		.uleb128 0x13
 574 0092 00       		.byte	0
 575 0093 00       		.byte	0
 576 0094 0D       		.uleb128 0xd
 577 0095 0D       		.uleb128 0xd
ARM GAS  C:\Users\rabbit\AppData\Local\Temp\cc9nYx0b.s 			page 24


 578 0096 00       		.byte	0
 579 0097 03       		.uleb128 0x3
 580 0098 0E       		.uleb128 0xe
 581 0099 3A       		.uleb128 0x3a
 582 009a 0B       		.uleb128 0xb
 583 009b 3B       		.uleb128 0x3b
 584 009c 05       		.uleb128 0x5
 585 009d 49       		.uleb128 0x49
 586 009e 13       		.uleb128 0x13
 587 009f 38       		.uleb128 0x38
 588 00a0 0B       		.uleb128 0xb
 589 00a1 00       		.byte	0
 590 00a2 00       		.byte	0
 591 00a3 0E       		.uleb128 0xe
 592 00a4 2E       		.uleb128 0x2e
 593 00a5 00       		.byte	0
 594 00a6 3F       		.uleb128 0x3f
 595 00a7 19       		.uleb128 0x19
 596 00a8 03       		.uleb128 0x3
 597 00a9 0E       		.uleb128 0xe
 598 00aa 3A       		.uleb128 0x3a
 599 00ab 0B       		.uleb128 0xb
 600 00ac 3B       		.uleb128 0x3b
 601 00ad 0B       		.uleb128 0xb
 602 00ae 27       		.uleb128 0x27
 603 00af 19       		.uleb128 0x19
 604 00b0 11       		.uleb128 0x11
 605 00b1 01       		.uleb128 0x1
 606 00b2 12       		.uleb128 0x12
 607 00b3 06       		.uleb128 0x6
 608 00b4 40       		.uleb128 0x40
 609 00b5 18       		.uleb128 0x18
 610 00b6 9742     		.uleb128 0x2117
 611 00b8 19       		.uleb128 0x19
 612 00b9 00       		.byte	0
 613 00ba 00       		.byte	0
 614 00bb 0F       		.uleb128 0xf
 615 00bc 2E       		.uleb128 0x2e
 616 00bd 00       		.byte	0
 617 00be 3F       		.uleb128 0x3f
 618 00bf 19       		.uleb128 0x19
 619 00c0 03       		.uleb128 0x3
 620 00c1 0E       		.uleb128 0xe
 621 00c2 3A       		.uleb128 0x3a
 622 00c3 0B       		.uleb128 0xb
 623 00c4 3B       		.uleb128 0x3b
 624 00c5 05       		.uleb128 0x5
 625 00c6 27       		.uleb128 0x27
 626 00c7 19       		.uleb128 0x19
 627 00c8 11       		.uleb128 0x11
 628 00c9 01       		.uleb128 0x1
 629 00ca 12       		.uleb128 0x12
 630 00cb 06       		.uleb128 0x6
 631 00cc 40       		.uleb128 0x40
 632 00cd 18       		.uleb128 0x18
 633 00ce 9742     		.uleb128 0x2117
 634 00d0 19       		.uleb128 0x19
ARM GAS  C:\Users\rabbit\AppData\Local\Temp\cc9nYx0b.s 			page 25


 635 00d1 00       		.byte	0
 636 00d2 00       		.byte	0
 637 00d3 10       		.uleb128 0x10
 638 00d4 2E       		.uleb128 0x2e
 639 00d5 01       		.byte	0x1
 640 00d6 3F       		.uleb128 0x3f
 641 00d7 19       		.uleb128 0x19
 642 00d8 03       		.uleb128 0x3
 643 00d9 0E       		.uleb128 0xe
 644 00da 3A       		.uleb128 0x3a
 645 00db 0B       		.uleb128 0xb
 646 00dc 3B       		.uleb128 0x3b
 647 00dd 05       		.uleb128 0x5
 648 00de 27       		.uleb128 0x27
 649 00df 19       		.uleb128 0x19
 650 00e0 11       		.uleb128 0x11
 651 00e1 01       		.uleb128 0x1
 652 00e2 12       		.uleb128 0x12
 653 00e3 06       		.uleb128 0x6
 654 00e4 40       		.uleb128 0x40
 655 00e5 18       		.uleb128 0x18
 656 00e6 9742     		.uleb128 0x2117
 657 00e8 19       		.uleb128 0x19
 658 00e9 01       		.uleb128 0x1
 659 00ea 13       		.uleb128 0x13
 660 00eb 00       		.byte	0
 661 00ec 00       		.byte	0
 662 00ed 11       		.uleb128 0x11
 663 00ee 898201   		.uleb128 0x4109
 664 00f1 00       		.byte	0
 665 00f2 11       		.uleb128 0x11
 666 00f3 01       		.uleb128 0x1
 667 00f4 9542     		.uleb128 0x2115
 668 00f6 19       		.uleb128 0x19
 669 00f7 31       		.uleb128 0x31
 670 00f8 13       		.uleb128 0x13
 671 00f9 00       		.byte	0
 672 00fa 00       		.byte	0
 673 00fb 12       		.uleb128 0x12
 674 00fc 34       		.uleb128 0x34
 675 00fd 00       		.byte	0
 676 00fe 03       		.uleb128 0x3
 677 00ff 0E       		.uleb128 0xe
 678 0100 3A       		.uleb128 0x3a
 679 0101 0B       		.uleb128 0xb
 680 0102 3B       		.uleb128 0x3b
 681 0103 0B       		.uleb128 0xb
 682 0104 49       		.uleb128 0x49
 683 0105 13       		.uleb128 0x13
 684 0106 3F       		.uleb128 0x3f
 685 0107 19       		.uleb128 0x19
 686 0108 3C       		.uleb128 0x3c
 687 0109 19       		.uleb128 0x19
 688 010a 00       		.byte	0
 689 010b 00       		.byte	0
 690 010c 13       		.uleb128 0x13
 691 010d 2E       		.uleb128 0x2e
ARM GAS  C:\Users\rabbit\AppData\Local\Temp\cc9nYx0b.s 			page 26


 692 010e 00       		.byte	0
 693 010f 3F       		.uleb128 0x3f
 694 0110 19       		.uleb128 0x19
 695 0111 3C       		.uleb128 0x3c
 696 0112 19       		.uleb128 0x19
 697 0113 6E       		.uleb128 0x6e
 698 0114 0E       		.uleb128 0xe
 699 0115 03       		.uleb128 0x3
 700 0116 0E       		.uleb128 0xe
 701 0117 3A       		.uleb128 0x3a
 702 0118 0B       		.uleb128 0xb
 703 0119 3B       		.uleb128 0x3b
 704 011a 0B       		.uleb128 0xb
 705 011b 00       		.byte	0
 706 011c 00       		.byte	0
 707 011d 00       		.byte	0
 708              		.section	.debug_aranges,"",%progbits
 709 0000 34000000 		.4byte	0x34
 710 0004 0200     		.2byte	0x2
 711 0006 00000000 		.4byte	.Ldebug_info0
 712 000a 04       		.byte	0x4
 713 000b 00       		.byte	0
 714 000c 0000     		.2byte	0
 715 000e 0000     		.2byte	0
 716 0010 00000000 		.4byte	.LFB0
 717 0014 2C000000 		.4byte	.LFE0-.LFB0
 718 0018 00000000 		.4byte	.LFB1
 719 001c 30000000 		.4byte	.LFE1-.LFB1
 720 0020 00000000 		.4byte	.LFB2
 721 0024 02000000 		.4byte	.LFE2-.LFB2
 722 0028 00000000 		.4byte	.LFB3
 723 002c 04000000 		.4byte	.LFE3-.LFB3
 724 0030 00000000 		.4byte	0
 725 0034 00000000 		.4byte	0
 726              		.section	.debug_ranges,"",%progbits
 727              	.Ldebug_ranges0:
 728 0000 00000000 		.4byte	.LFB0
 729 0004 2C000000 		.4byte	.LFE0
 730 0008 00000000 		.4byte	.LFB1
 731 000c 30000000 		.4byte	.LFE1
 732 0010 00000000 		.4byte	.LFB2
 733 0014 02000000 		.4byte	.LFE2
 734 0018 00000000 		.4byte	.LFB3
 735 001c 04000000 		.4byte	.LFE3
 736 0020 00000000 		.4byte	0
 737 0024 00000000 		.4byte	0
 738              		.section	.debug_line,"",%progbits
 739              	.Ldebug_line0:
 740 0000 C0000000 		.section	.debug_str,"MS",%progbits,1
 740      02006200 
 740      00000201 
 740      FB0E0D00 
 740      01010101 
 741              	.LASF41:
 742 0000 55534246 		.ascii	"USBFS_ReInitComponent\000"
 742      535F5265 
 742      496E6974 
ARM GAS  C:\Users\rabbit\AppData\Local\Temp\cc9nYx0b.s 			page 27


 742      436F6D70 
 742      6F6E656E 
 743              	.LASF29:
 744 0016 65704372 		.ascii	"epCr0\000"
 744      3000
 745              	.LASF11:
 746 001c 666C6F61 		.ascii	"float\000"
 746      7400
 747              	.LASF3:
 748 0022 73686F72 		.ascii	"short unsigned int\000"
 748      7420756E 
 748      7369676E 
 748      65642069 
 748      6E7400
 749              	.LASF37:
 750 0035 47656E65 		.ascii	"Generated_Source\\PSoC5\\USBFS_episr.c\000"
 750      72617465 
 750      645F536F 
 750      75726365 
 750      5C50536F 
 751              	.LASF26:
 752 005a 545F5553 		.ascii	"T_USBFS_EP_CTL_BLOCK\000"
 752      4246535F 
 752      45505F43 
 752      544C5F42 
 752      4C4F434B 
 753              	.LASF39:
 754 006f 55534246 		.ascii	"USBFS_BUS_RESET_ISR\000"
 754      535F4255 
 754      535F5245 
 754      5345545F 
 754      49535200 
 755              	.LASF27:
 756 0083 6570436E 		.ascii	"epCnt0\000"
 756      743000
 757              	.LASF28:
 758 008a 6570436E 		.ascii	"epCnt1\000"
 758      743100
 759              	.LASF20:
 760 0091 6570546F 		.ascii	"epToggle\000"
 760      67676C65 
 760      00
 761              	.LASF1:
 762 009a 756E7369 		.ascii	"unsigned char\000"
 762      676E6564 
 762      20636861 
 762      7200
 763              	.LASF14:
 764 00a8 72656738 		.ascii	"reg8\000"
 764      00
 765              	.LASF18:
 766 00ad 61706945 		.ascii	"apiEpState\000"
 766      70537461 
 766      746500
 767              	.LASF36:
 768 00b8 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 768      43313120 
ARM GAS  C:\Users\rabbit\AppData\Local\Temp\cc9nYx0b.s 			page 28


 768      352E342E 
 768      31203230 
 768      31363036 
 769 00eb 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 769      20726576 
 769      6973696F 
 769      6E203233 
 769      37373135 
 770 011e 73202D66 		.ascii	"s -ffunction-sections -ffat-lto-objects\000"
 770      66756E63 
 770      74696F6E 
 770      2D736563 
 770      74696F6E 
 771              	.LASF21:
 772 0146 61646472 		.ascii	"addr\000"
 772      00
 773              	.LASF35:
 774 014b 55534246 		.ascii	"USBFS_SOF_ISR\000"
 774      535F534F 
 774      465F4953 
 774      5200
 775              	.LASF31:
 776 0159 73696545 		.ascii	"sieEp\000"
 776      7000
 777              	.LASF40:
 778 015f 55534246 		.ascii	"USBFS_EP\000"
 778      535F4550 
 778      00
 779              	.LASF12:
 780 0168 646F7562 		.ascii	"double\000"
 780      6C6500
 781              	.LASF30:
 782 016f 55534246 		.ascii	"USBFS_sie_ep_struct\000"
 782      535F7369 
 782      655F6570 
 782      5F737472 
 782      75637400 
 783              	.LASF23:
 784 0183 62756666 		.ascii	"buffOffset\000"
 784      4F666673 
 784      657400
 785              	.LASF10:
 786 018e 75696E74 		.ascii	"uint16\000"
 786      313600
 787              	.LASF32:
 788 0195 55534246 		.ascii	"USBFS_sie_eps_struct\000"
 788      535F7369 
 788      655F6570 
 788      735F7374 
 788      72756374 
 789              	.LASF5:
 790 01aa 6C6F6E67 		.ascii	"long unsigned int\000"
 790      20756E73 
 790      69676E65 
 790      6420696E 
 790      7400
 791              	.LASF8:
ARM GAS  C:\Users\rabbit\AppData\Local\Temp\cc9nYx0b.s 			page 29


 792 01bc 756E7369 		.ascii	"unsigned int\000"
 792      676E6564 
 792      20696E74 
 792      00
 793              	.LASF7:
 794 01c9 6C6F6E67 		.ascii	"long long unsigned int\000"
 794      206C6F6E 
 794      6720756E 
 794      7369676E 
 794      65642069 
 795              	.LASF19:
 796 01e0 68774570 		.ascii	"hwEpState\000"
 796      53746174 
 796      6500
 797              	.LASF33:
 798 01ea 55534246 		.ascii	"USBFS_EP_1_ISR\000"
 798      535F4550 
 798      5F315F49 
 798      535200
 799              	.LASF38:
 800 01f9 433A5C55 		.ascii	"C:\\Users\\rabbit\\Documents\\v5.0c\\SCSI2SD\\softw"
 800      73657273 
 800      5C726162 
 800      6269745C 
 800      446F6375 
 801 0226 6172655C 		.ascii	"are\\SCSI2SD\\v5.0\\USB_Bootloader.cydsn\000"
 801      53435349 
 801      3253445C 
 801      76352E30 
 801      5C555342 
 802              	.LASF16:
 803 024c 73697A65 		.ascii	"sizetype\000"
 803      74797065 
 803      00
 804              	.LASF17:
 805 0255 61747472 		.ascii	"attrib\000"
 805      696200
 806              	.LASF22:
 807 025c 65704D6F 		.ascii	"epMode\000"
 807      646500
 808              	.LASF6:
 809 0263 6C6F6E67 		.ascii	"long long int\000"
 809      206C6F6E 
 809      6720696E 
 809      7400
 810              	.LASF13:
 811 0271 63686172 		.ascii	"char\000"
 811      00
 812              	.LASF24:
 813 0276 62756666 		.ascii	"bufferSize\000"
 813      65725369 
 813      7A6500
 814              	.LASF2:
 815 0281 73686F72 		.ascii	"short int\000"
 815      7420696E 
 815      7400
 816              	.LASF9:
ARM GAS  C:\Users\rabbit\AppData\Local\Temp\cc9nYx0b.s 			page 30


 817 028b 75696E74 		.ascii	"uint8\000"
 817      3800
 818              	.LASF25:
 819 0291 696E7465 		.ascii	"interface\000"
 819      72666163 
 819      6500
 820              	.LASF4:
 821 029b 6C6F6E67 		.ascii	"long int\000"
 821      20696E74 
 821      00
 822              	.LASF34:
 823 02a4 55534246 		.ascii	"USBFS_EP_2_ISR\000"
 823      535F4550 
 823      5F325F49 
 823      535200
 824              	.LASF15:
 825 02b3 6C6F6E67 		.ascii	"long double\000"
 825      20646F75 
 825      626C6500 
 826              	.LASF0:
 827 02bf 7369676E 		.ascii	"signed char\000"
 827      65642063 
 827      68617200 
 828              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
